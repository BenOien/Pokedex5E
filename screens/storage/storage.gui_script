local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local profiles = require "pokedex.profiles"
local monarch = require "monarch.monarch"
local url = require "utils.url"
local button = require "utils.button"
local gooey = require "gooey.gooey"
local inventory = require "screens.storage.inventory"
local pc = require "screens.storage.pc"
local gui_colors = require "utils.gui_colors"

local COLUMNS = 3
local first_position = vmath.vector3(-375, 800, 0)
local distance = vmath.vector3(200, 200, 0)

local selected_storage = {}
local selected_inventory = {}

local function setup_button()
	button.register("btn_sort", function() 
		monarch.show("sorting", {clear=true})
	end)
	button.register("btn_add", function() 
		monarch.show("add", {clear=true})
	end)
end

function init(self)
	url.STORAGE = msg.url()
	button.acquire()
	gui.set_text(gui.get_node("title"), profiles.get_active_name() .. "'s PC")
	self.all_pokemons = storage.list_of_ids_in_storage()
	self.filtered_pokemons = {}
	setup_button()
	gui.set_text(gui.get_node("pokemon_total"), "Pokemon Total: " .. storage.get_total())
	pc.setup(gui.get_node("scrollist"), gui.get_node("scroll"), gui.get_node("pokemon_entry/root"))
	inventory.setup()
end


local function filter_list(self, search_string)
	local function starts_with(str, start)
		return string.lower(str):sub(1, #start) == string.lower(start)
	end

	if #search_string > 0 then
		self.filtered_pokemons = {}
		for i=#self.all_pokemons, 1, -1 do
			local p = storage.get_copy(self.all_pokemons[i])
			if starts_with(_pokemon.get_current_species(p), search_string) then
				table.insert(self.filtered_pokemons, 1, self.all_pokemons[i])
			end
		end
	else
		self.filtered_pokemons = self.all_pokemons
	end
	pc.filtered_pokemons(self.filtered_pokemons)
end

local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		gui.set_text(input.node, "search")
		gui.set_color(input.node, gui_colors.HERO_TEXT_FADED)
	end

	local cursor = gui.get_node("cursor")
	if input.selected then
		self.all_pokemons = storage.list_of_ids_in_storage()
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(input.node, gui_colors.HERO_TEXT)
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		filter_list(self, input.text)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
end

function on_input(self, action_id, action)
	pc.on_input(action_id, action)
	inventory.on_input(action_id, action)
	gooey.input("search_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, nil, function(input)
		refresh_input(self, input, "search_text")
	end)
end

function final()
	pc.final()
	inventory.final()
	button.unregister()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("storage_updated") then
		gui.set_text(gui.get_node("pokemon_total"), "Pokemon Total: " .. storage.get_total())
		inventory.redraw()
	elseif message_id == hash("inventory_updated") then
		gui.set_text(gui.get_node("pokemon_total"), "Pokemon Total: " .. storage.get_total())
		pc.redraw(storage.list_of_ids_in_storage())
	end
end