local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local gooey = require "gooey.gooey"
local utils = require "utils.utils"

local STORAGE_ROWS = 10
local STORAGE_COLUMNS = 2
local INVENTORY_COLUMNS = 2

local WHITE = vmath.vector4(1, 1, 1, 1)
local BLACK = vmath.vector4()

local position = vmath.vector3()

local function update_checkbox(checkbox_state, checkbox)
	if checkbox_state.checked then
		gui.set_color(checkbox.node["storage_pokemon/checkmark_mark"], WHITE)
	else
		gui.set_color(checkbox.node["storage_pokemon/checkmark_mark"], BLACK)
	end
end

local function add_inventory_item(self, node, pokemon_index)
	local item_index = #self.inventory_checkboxes
	position.x = math.fmod(item_index, STORAGE_COLUMNS) * 360
	position.y = math.floor(item_index/STORAGE_COLUMNS) * -55
	gui.set_position(node["storage_pokemon/root"], position)
	gui.set_parent(node["storage_pokemon/root"], self.inventory_container)
	table.insert(self.inventory_checkboxes, {node=node, index=pokemon_index})
end

local function add_inventory(self)
	for pokemon_index, pokemon in pairs(storage.active) do
		local inventory_node = gui.clone_tree(self.storage_template)
		gui.set_text(inventory_node["storage_pokemon/txt_level"], pokemon.level)
		gui.set_text(inventory_node["storage_pokemon/txt_spicies"], pokemon.spicies)
		add_inventory_item(self, inventory_node, pokemon_index)
	end
end

local function add_storage_item(self, node, pokemon_index)
	local item_index = #self.storage_checkboxes
	position.x = math.fmod(item_index, STORAGE_COLUMNS) * 360
	position.y = math.floor(item_index/STORAGE_COLUMNS) * -55
	gui.set_position(node["storage_pokemon/root"], position)
	gui.set_parent(node["storage_pokemon/root"], self.storage_container)
	table.insert(self.storage_checkboxes, {node=node, index=pokemon_index})
end

local function add_storage(self)
	for pokemon_index, pokemon in pairs(storage.storage) do
		local storage_node = gui.clone_tree(self.storage_template)
		gui.set_text(storage_node["storage_pokemon/txt_level"], pokemon.level)
		gui.set_text(storage_node["storage_pokemon/txt_spicies"], pokemon.spicies)
		add_storage_item(self, storage_node, pokemon_index)
	end
end

local function redraw(self)
	for _, node in pairs(self.storage_checkboxes) do
		gui.delete_node(node.node["storage_pokemon/root"])
	end
	
	for _, node in pairs(self.inventory_checkboxes) do
		gui.delete_node(node.node["storage_pokemon/root"])
	end

	self.inventory_checkboxes = {}
	self.storage_checkboxes = {}
	self.selected_inventory_pokemons = {}
	self.selected_storage_pokemons = {}

	add_inventory(self)
	add_storage(self)
end

function init(self)
	button.acquire()
	self.selected_inventory_pokemons = {}
	self.selected_storage_pokemons = {}
	self.storage_checkboxes = {}
	self.inventory_checkboxes = {}
	self.storage_template = gui.get_node("storage_pokemon/root")
	self.storage_container = gui.get_node("storage")
	self.inventory_container = gui.get_node("inventory")
	
	add_storage(self)
	add_inventory(self)
	button.register("btn_move", function()
		if next(self.selected_storage_pokemons) ~= nil then
			-- Move to inventory
			for i = #self.selected_storage_pokemons, 1, -1 do
				storage.move_to_inventory(index)
				
			end
		elseif next(self.selected_inventory_pokemons) ~= nil then
			-- Move to storage
			for _, index in pairs(self.selected_inventory_pokemons) do
				storage.move_to_storage(index)
			end
		end
		redraw(self)
	end)
	
	button.register("btn_back", function()
		monarch.show("splash")
	end)

	--gui.delete_node(self.storage_template)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end



local function on_checked_inventory(self, checkbox_state, checkbox)
	if next(self.selected_storage_pokemons) ~= nil then 
		return
	end
	if checkbox_state.checked then 
		table.insert(self.selected_inventory_pokemons, checkbox.index)
	else
		for i, index in pairs(self.selected_inventory_pokemons) do
			if checkbox.index == index then
				table.remove(self.selected_inventory_pokemons, i)
			end
		end
	end
end

local function on_checked_storage(self, checkbox_state, checkbox)
	if next(self.selected_inventory_pokemons) ~= nil then 
		return
	end
	if checkbox_state.checked then 
		table.insert(self.selected_storage_pokemons, checkbox.index)
	else
		for i, index in pairs(self.selected_storage_pokemons) do
			if checkbox.index == index then
				table.remove(self.selected_storage_pokemons, i)
			end
		end
	end
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	for _, checkbox in pairs(self.storage_checkboxes) do
		gooey.checkbox(checkbox.node["storage_pokemon/root"], action_id, action, function(checkbox_state)
			on_checked_storage(self, checkbox_state, checkbox) 
		end, function(checkbox_state)
			update_checkbox(checkbox_state, checkbox)
		end)
	end

	for _, checkbox in pairs(self.inventory_checkboxes) do
		gooey.checkbox(checkbox.node["storage_pokemon/root"], action_id, action, function(checkbox_state)
			on_checked_inventory(self, checkbox_state, checkbox) 
		end, function(checkbox_state)
			update_checkbox(checkbox_state, checkbox)
		end)
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
