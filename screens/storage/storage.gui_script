local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local profiles = require "pokedex.profiles"
local monarch = require "monarch.monarch"
local url = require "utils.url"
local button = require "utils.button"
local gooey = require "gooey.gooey"
local inventory = require "screens.storage.inventory"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local searchbar = require "screens.storage.searchbar"

local function table_of_rows(self)
	local l = {}
	for i=1, math.ceil(#self.filtered_list / 3) do
		table.insert(l, i)
	end
	return l
end

local storage_data = {}

local function update_storage_data(self)
	self.pokemon_rows = table_of_rows(self)
	
	storage_data = {}
	local storage_ids = self.filtered_list
	for i=1, math.ceil(#storage_ids / 3) do
		storage_data[i] = {}
		for a=1, 3 do
			local pokemon_id = storage_ids[(i-1)*3 + a]
			local pokemon = storage.get_copy(pokemon_id)
			if pokemon then
				local sprite, texture = _pokemon.get_sprite(pokemon)
				local species = _pokemon.get_current_species(pokemon)
				local level = _pokemon.get_caught_level(pokemon)
				storage_data[i][a] = {sprite=sprite, texture=texture, species=species, level=level}
			end
		end
	end
end

local function update_items(item)
	for i=1, 3 do
		local sprite_node = item.nodes["pokemon_row/pokemon" .. i .. "/pokemon_sprite"]
		local text_node = item.nodes["pokemon_row/pokemon" .. i .. "/txt_pokemon"]
		local data = storage_data[item.data]
		if data and data[i] then
			gui.set_enabled(sprite_node, true)
			gui.set_texture(sprite_node, data[i].texture)
			gui.play_flipbook(sprite_node, data[i].sprite)
			gui.set_text(text_node, data[i].species .. "\nLv. " .. data[i].level)
		else
			gui.set_enabled(sprite_node, false)
		end
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_items(item)
	end
end


local action_position
function init(self)
	url.STORAGE = msg.url()
	gooey.acquire_input()
	msg.post(url.MENU, "show")
	action_position = vmath.vector3()
	self.filtered_list = storage.list_of_ids_in_storage()
	self.all_pokemons = storage.list_of_ids_in_storage()
	update_storage_data(self)
	
	gui.set_text(gui.get_node("title"), profiles.get_active_name() .. "'s PC")
	gui.set_text(gui.get_node("pokemon_total"), "Pokemon Total: " .. storage.get_total())
	update_list(gooey.dynamic_list("storage", "scrollist", "pokemon_row/row", self.pokemon_rows))
	inventory.setup()
end


local function on_item_selected(list)
	for i, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			for i=1, 3 do
				local sprite_node = entry.nodes[hash("pokemon_row/pokemon" .. i .. "/pokemon_sprite")]
				if gui.pick_node(sprite_node, action_position.x, action_position.y) then
					local pokemon_id = storage.list_of_ids_in_storage()[(list.selected_item-1)*3 + i]
					monarch.show("transfer_pokemon", {}, {id=pokemon_id, to="inventory"})
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	action_position.x = action.x
	action_position.y = action.y
	inventory.on_input(action_id, action)
	gooey.dynamic_list("storage", "scrollist", "pokemon_row/row", self.pokemon_rows, action_id, action, on_item_selected, update_list)
	
	gooey.button("btn_sort", action_id, action, function() monarch.show("sorting") end, gooey_buttons.pokemon_sort_button)
	gooey.button("btn_add", action_id, action, function() monarch.show("add") end, gooey_buttons.pokemon_add_button)
	searchbar.on_input(self, action_id, action)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("storage_updated") then
		gui.set_text(gui.get_node("pokemon_total"), "Pokemon Total: " .. storage.get_total())
		update_storage_data(self)
		update_list(gooey.dynamic_list("storage", "scrollist", "pokemon_row/row", self.pokemon_rows))
	elseif message_id == hash("inventory_updated") then
		gui.set_text(gui.get_node("pokemon_total"), "Pokemon Total: " .. storage.get_total())
		inventory.redraw(storage.list_of_ids_in_storage())
	elseif message_id == hash("sorting_updated") then
		self.filtered_list = storage.list_of_ids_in_storage()
		update_storage_data(self)
		update_list(gooey.dynamic_list("storage", "scrollist", "pokemon_row/row", self.pokemon_rows))
	end
end