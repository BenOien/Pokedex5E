local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"
local _feats = require "pokedex.feats"
local movedex = require "pokedex.moves"
local party = require "screens.party.party"
local gesture = require "utils.gesture"
local url = require "utils.url"
local type_data = require "utils.type_data"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"

local STATS = {"STR", "INT", "DEX", "WIS", "CON", "CHA"}

local active_buttons = {}
local active_lists = {}
local node_index = 0

local function join_table(title, T, sep)
	if T then
		return title .. table.concat(T, sep)
	end
	return title
end

local function add_operation(value)
	if value >= 0 then
		value = "+" .. value
	end
	return value
end

local function to_mod(v)
	local value = math.floor((v - 10) / 2)
	return add_operation(value)
end

local function update_hp_meter(nodes, max, current)
	local max_size = gui.get_size(nodes["pokemon/hp_bar_bg"])
	local percent = current/max
	local size = gui.get_size(nodes["pokemon/hp_bar_bg1"])
	
	size.x = math.max(math.min(percent * max_size.x, max_size.x), 0)
	gui.set_size(nodes["pokemon/hp_bar_bg1"], size)
end

local function show_description(pokemon, move, data)
	monarch.show("move_info", {}, {pokemon=pokemon, name=move, data=data})
end

local function update_exp(self, exp, index)
	index = index or self.pokemon_index
	local current = self.pokemons_list[index+1]
	local current_level = _pokemon.get_current_level(current.pokemon)
	local max = pokedex.get_experience_for_level(current_level)
	local offset = pokedex.get_experience_for_level(current_level - 1)
	_pokemon.set_exp(current.pokemon, exp)
	local node_text = current.nodes[hash("pokemon/txt_exp")]
	local node_bar = current.nodes[hash("pokemon/exp_bar")]
	local node_max = current.nodes[hash("pokemon/exp_bar_bg")]
	local max_size = gui.get_size(node_max)
	local percent = (exp-offset)/(max-offset)
	local size = gui.get_size(node_bar)

	size.x = math.max(math.min(percent * max_size.x, max_size.x), 0)
	gui.set_size(node_bar, size)
	gui.set_text(node_text, "EXP: " .. exp .. "/" .. max)
end

local function update_pp(pp_lbl, pp_current, pp_max, pokemon, name)
	local current = _pokemon.get_move_pp(pokemon, name) 
	local max = movedex.get_move_pp(name)
	gui.set_text(pp_current, current)
	gui.set_text(pp_max, "/" .. max)
	local p = gui.get_position(pp_current)
	local cp = gui.get_position(pp_max)
	p.x = p.x + gui.get_text_metrics_from_node(pp_current).width
	p.y = cp.y
	gui.set_position(pp_max, p)
	if current == 0 then
		gui.set_color(pp_current, gui_colors.RED)
	elseif current < max then
		gui.set_color(pp_current, gui_colors.RED)
	else
		gui.set_color(pp_current, gui_colors.GREEN)
	end
end

local function setup_moves(self, nodes, pokemon)
	local enabled_moves = {}
	local index
	local function _get_node(sub)
		local move_name = "pokemon/move_" .. index
		local n = nodes[move_name .. sub]
		gui.set_id(n, hash("move" .. node_index))
		node_index = node_index + 1
		return n
	end

	for name, move in pairs(_pokemon.get_moves(pokemon)) do
		index = move.index
		enabled_moves[move.index] = true
		local move_data = _pokemon.get_move_data(pokemon, name)
		local pp_current = _get_node("/txt_pp_current")
		local pp_max = _get_node("/txt_pp_max")
		local pp_lbl = _get_node("/lbl_pp")

		local m = {node=gui.get_id(_get_node("/pp/btn_minus")), func=function()
			_pokemon.decrease_move_pp(pokemon, name)
			update_pp(pp_lbl, pp_current, pp_max, pokemon, name)
		end, refresh=gooey_buttons.minus_button
		}

		local p = {node=gui.get_id(_get_node("/pp/btn_plus")), func=function()
			_pokemon.increase_move_pp(pokemon, name)
			update_pp(pp_lbl, pp_current, pp_max, pokemon, name)
		end, refresh=gooey_buttons.plus_button
		}
		
		table.insert(active_buttons, m)
		table.insert(active_buttons, p)
		
		button.register(_get_node("/move"), function()
			show_description(pokemon, name, move)
		end)
		
		gui.set_text(_get_node("/action"), move_data.time)
		gui.set_text(_get_node("/duration"), move_data.duration)
		update_pp(pp_lbl, pp_current, pp_max, pokemon, name)

		if move_data.damage then
			gui.set_text(_get_node("/bonus"), "AB: " .. move_data.AB)
			gui.set_text(_get_node("/damage"), move_data.damage)
		elseif move_data.save_dc then
			gui.set_text(_get_node("/damage"), "Save DC: " .. move_data.save_dc)
		else
			gui.set_text(_get_node("/damage"), "-")
			gui.set_text(_get_node("/bonus"), "-")
		end

		if move_data.AB == nil then
			gui.set_text(_get_node("/bonus"), "AB: -")
		end
		gui.set_text(_get_node("/name"), name:upper())
		local type = type_data[move_data.type]
		gui.set_color(_get_node("/name"), type.color)
		gui.play_flipbook(_get_node("/element"), type.icon)
		
		gui.set_text(_get_node("/range"), move_data.range or "")
	end
	for i=1, 4 do
		local n = nodes["pokemon/move_" .. i .. "/move"]
		if not enabled_moves[i] then
			gui.set_enabled(n, false)
		end
	end
end

local function update_listitem(list, item, pokemon_id)
	if item.data ~= "" then
		local desc = pokedex.get_ability_description(item.data)
		local name_node = item.nodes[list.id .. "name"]
		local desc_node = item.nodes[list.id .. "description"]
		local background_node = item.nodes[list.id .. "bg"]
		gui.set_text(name_node, item.data:upper())
		gui.set_text(desc_node, desc)
		local desc_height, name_height = gui.get_text_metrics_from_node(desc_node).height, gui.get_text_metrics_from_node(name_node).height --* 0.8
		local size = gui.get_size(background_node)
		size.y = desc_height + name_height + 10
		gui.set_size(background_node, size)
	end
end

local function update_list(list, pokemon_id)
	for i,item in ipairs(list.items) do
		update_listitem(list, item, pokemon_id)
	end
end

local function setup_ability(nodes, name, desc, p, i)
	local root_node
	local name_node
	local desc_node
	if i == 1 then
		root_node = nodes["pokemon/ability/root"]
		name_node = nodes["pokemon/ability/name"]
		desc_node = nodes["pokemon/ability/description"]
		background_node = nodes["pokemon/ability/background"]
	else
		root_node = gui.clone(nodes["pokemon/ability/root"])
		name_node = gui.clone(nodes["pokemon/ability/name"])
		desc_node = gui.clone(nodes["pokemon/ability/description"])
		background_node = gui.clone(nodes["pokemon/ability/background"])
		gui.set_parent(background_node, root_node)
		gui.set_parent(name_node, root_node)
		gui.set_parent(desc_node, root_node)
		gui.set_inherit_alpha(background_node, false)
		gui.set_inherit_alpha(name_node, false)
		gui.set_inherit_alpha(desc_node, false)
	end

	gui.set_position(root_node, p)
	gui.set_text(name_node, name:upper())
	gui.set_text(desc_node, desc)
	local desc_height, name_height = gui.get_text_metrics_from_node(desc_node).height, gui.get_text_metrics_from_node(name_node).height
	local size = gui.get_size(background_node)
	size.y = desc_height + name_height
	gui.set_size(background_node, size)
	local n = gui.get_position(name_node, p)
	local d = gui.get_position(desc_node, p)
	n.y = size.y * 0.55
	d.y = n.y - name_height * 1.2
	gui.set_position(name_node, n)
	gui.set_position(desc_node, d)
	
	size.y = size.y + 5
	gui.set_size(root_node, size)

	p.y = p.y - desc_height - name_height
	return root_node
end

local function setup_abilities(self, nodes, pokemon)
	local function _get_node(sub)
		local name = "pokemon/ability_" .. index
		local n = nodes[name .. sub]
		return n
	end
	local p = vmath.vector3(0, 0, 0)
	local index
	local list = {}
	list.data = {}
	list.id = _pokemon.get_id(pokemon)
	gui.set_id(nodes["pokemon/tab_stencil_2"], list.id .. "tab")
	list.stencil = gui.get_id(nodes["pokemon/tab_stencil_2"])
	
	local abilities = _pokemon.get_abilities(pokemon)
	local feats = _pokemon.get_feats(pokemon)
	if next(abilities) then
		for i, name in pairs(abilities) do
			index = i
			local desc = pokedex.get_ability_description(name)
			local root_node = setup_ability(nodes, name, desc, p, index)
			local id = list.id .. name
			table.insert(list.data, id)
			gui.set_id(root_node, id)
		end
		table.insert(active_lists, list)
	end
	if next(feats) then
		for i, name in pairs(feats) do
			index = index + 1
			local desc = _feats.get_feat_description(name)
			local root_node = setup_ability(nodes, name, desc, p, index)
			local id = list.id .. name
			table.insert(list.data, id)
			gui.set_id(root_node, id)
		end
		table.insert(active_lists, list)
	end
	
	if next(abilities) == nil and next(feats) == nil then
		gui.delete_node(nodes["pokemon/ability/root"])
	end
end


local function setup_info(self, nodes, pokemon)
	local abilities_string1 = ""
	local saving_throw_string1 = ""
	local abilities_string2 = ""
	local saving_throw_string2 = ""
	
	local st_attributes = _pokemon.get_saving_throw_modifier(pokemon)
	local total_attributes = _pokemon.get_attributes(pokemon)
	for i, stat in pairs({"STR", "DEX", "CON"}) do
		abilities_string1 = abilities_string1 .. total_attributes[stat] .. "\n"
		saving_throw_string1 = saving_throw_string1 .. add_operation(st_attributes[stat])  .. "\n"
	end	

	for i, stat in pairs({"INT", "WIS", "CHA"}) do
		abilities_string2 = abilities_string2 .. total_attributes[stat] .. "\n"
		saving_throw_string2 = saving_throw_string2 .. add_operation(st_attributes[stat])  .. "\n"
	end
	
	gui.set_text(nodes["pokemon/attributes_1"], abilities_string1)
	gui.set_text(nodes["pokemon/savingthrow_1"], saving_throw_string1)
	gui.set_text(nodes["pokemon/attributes_2"], abilities_string2)
	gui.set_text(nodes["pokemon/savingthrow_2"], saving_throw_string2)
	
	gui.set_text(nodes["pokemon/stab"], "STAB: " .. _pokemon.get_STAB_bonus(pokemon))
	gui.set_text(nodes["pokemon/prof"], "Prof: " .. _pokemon.get_proficency_bonus(pokemon))
	gui.set_text(nodes["pokemon/skills"], table.concat(_pokemon.get_skills(pokemon), ", "))
	
	local senses = _pokemon.get_senses(pokemon)
	if next(senses) ~= nil then
		gui.set_text(nodes["pokemon/txt_senses"], table.concat(_pokemon.get_senses(pokemon), "\n"))
	end
	local speeds = _pokemon.get_all_speed(pokemon)
	local speed_string = ""
	for name, amount in pairs(speeds) do
		if amount > 0 then
			speed_string = speed_string .. amount .. "ft. " .. name .. "\n"
		end
	end
	gui.set_text(nodes["pokemon/txt_speeds"], speed_string)
end

local function update_hp(self, nodes, pokemon, hp)
	if hp then
		local current =_pokemon.get_current_hp(pokemon)
		_pokemon.set_current_hp(pokemon, current + hp)
	end
	local max = _pokemon.get_max_hp(pokemon)
	local current =_pokemon.get_current_hp(pokemon)
	update_hp_meter(nodes, max, current)
	gui.set_text(nodes["pokemon/txt_hp"],"HP: " .. current .. "/ " .. max)
end

local function setup_page(self, nodes, pokemon, index)
	gui.set_id(nodes["pokemon/hp/btn_plus"], hash("page" .. node_index))
	node_index = node_index + 1
	local p = {node=gui.get_id(nodes["pokemon/hp/btn_plus"]), func=function() update_hp(self, nodes, pokemon, 1) end, refresh=gooey_buttons.plus_button}
	
	gui.set_id(nodes["pokemon/hp/btn_minus"], hash("page" .. node_index))
	node_index = node_index + 1
	local m = {node=gui.get_id(nodes["pokemon/hp/btn_minus"]), func=function() update_hp(self, nodes, pokemon, -1) end, refresh=gooey_buttons.minus_button}

	table.insert(active_buttons, p)
	table.insert(active_buttons, m)

	local speed, stype = _pokemon.get_speed_of_type(pokemon)
	local nickname = _pokemon.get_nickname(pokemon)
	local species = _pokemon.get_current_species(pokemon)
	nickname = nickname or species:upper()

	gui.set_text(nodes["pokemon/txt_speed"], stype:upper() .. ": " .. speed)
	gui.set_text(nodes["pokemon/index"], string.format("#%03d", _pokemon.get_index_number(pokemon)) .. " " .. species)
	gui.set_text(nodes["pokemon/species"], nickname)
	gui.set_text(nodes["pokemon/level"], "Lv. " ..  _pokemon.get_current_level(pokemon))
	gui.set_text(nodes["pokemon/nature"], _pokemon.get_nature(pokemon))
	gui.set_text(nodes["pokemon/ac"], "AC: " .. _pokemon.get_AC(pokemon))

	update_hp(self, nodes, pokemon)
	local pos = vmath.vector3()
	local vul = nodes["pokemon/vulnerabilities"]
	local imm = nodes["pokemon/immunities"]
	local res = nodes["pokemon/resistances"]
	gui.set_text(vul, join_table("Vulnerabilities: ", _pokemon.get_vulnerabilities(pokemon), ", "))
	gui.set_text(res, join_table("Resistances: ", _pokemon.get_resistances(pokemon), ", "))
	gui.set_text(imm, join_table("Immunities: ", _pokemon.get_immunities(pokemon), ", "))

	update_exp(self, _pokemon.get_exp(pokemon), index)
	setup_moves(self, nodes, pokemon)
	setup_abilities(self, nodes, pokemon)
	setup_info(self, nodes, pokemon)
end

local function activate_tab(self, page, tab_number)
	for i=1, 3 do
		if tab_number == i then
			gui.play_flipbook(page["pokemon/tab_" .. i], "common_down")
			gui.set_color(page["pokemon/text" .. i], gui_colors.BUTTON_TEXT_PRESSED)
			gui.set_enabled(page["pokemon/tab_bg_" .. i], true)
		else
			gui.play_flipbook(page["pokemon/tab_" .. i], "common_up")
			gui.set_color(page["pokemon/text" .. i], gui_colors.BUTTON_TEXT)
			gui.set_enabled(page["pokemon/tab_bg_" .. i], false)
		end
	end
end

local function add_pokemon_page(self, pokemon_id, index)
	local page = gui.clone_tree(self.pokemon_page)
	local p = vmath.vector3()
	p.x = (index-1) * 720
	gui.set_position(page["pokemon/root"], p)
	button.register(page["pokemon/tab_1"], function()
		activate_tab(self, page, 1)
	end)
	button.register(page["pokemon/tab_2"], function()
		activate_tab(self, page, 2)
	end)
	button.register(page["pokemon/tab_3"], function()
		activate_tab(self, page, 3)
	end)
	return page
end

local function change_pokemon(self, index, instant)
	if self.pokemons_list[index+1] == nil then
		return
	end
	local r = gui.get_node("scroll")
	local p = vmath.vector3()
	p.x = p.x + index * -720
	
	gui.set_enabled(self.pokemons_list[index+1].nodes[hash("pokemon/root")], true)

	local n = gui.get_node("party_indicator/pokemon_" .. index+1 .. "/pokemon_sprite")
	local pos = gui.get_position(n)
	pos.y = 0
	gui.set_position(gui.get_node("party_indicator/active"), pos)
	party.current_pokemon = self.pokemons_list[index+1].pokemon_id
	if instant then
		gui.set_position(r, p)
	else
		gui.animate(r, "position", p, gui.EASING_INSINE, 0.2, 0, function()
			for i, d in pairs(self.pokemons_list) do
				if i == index+1 then else
					gui.set_enabled(self.pokemons_list[i].nodes[hash("pokemon/root")], false)
				end
			end
		end)
	end
	party.last_active = index
end

function init(self)
	button.acquire()
	msg.post(url.MENU, "show")
	url.PARTY = msg.url()
	self.pokemon_page = gui.get_node("pokemon/root")
	self.pokemons_list = {}
	self.pokemon_index = 0
	local p = gui.get_position(gui.get_node("pokemon/tab_bg_1"))
	gui.set_position(gui.get_node("pokemon/tab_bg_2"), p)
	gui.set_position(gui.get_node("pokemon/tab_bg_3"), p)
	
	for index, pokemon_id in pairs(storage.list_of_ids_in_inventory()) do
		local page = add_pokemon_page(self, pokemon_id, index)
		local pokemon_data = storage.get_copy(pokemon_id)
		local pokemon_sprite, texture = _pokemon.get_sprite(pokemon_data)
		local exp = _pokemon.get_exp(pokemon_data)
		gui.set_texture(page["pokemon/pokemon_sprite"], texture)
		gui.play_flipbook(page["pokemon/pokemon_sprite"], pokemon_sprite)
		update_hp_meter(page, _pokemon.get_max_hp(pokemon_data), _pokemon.get_current_hp(pokemon_data))
		local indicator_node = gui.get_node("party_indicator/pokemon_" .. index .. "/pokemon_sprite")
		button.register(indicator_node, function()
			self.pokemon_index = index-1
			change_pokemon(self, index-1)
		end)
		gui.play_flipbook(gui.get_node("party_indicator/pokemon_" .. index .. "/pokemon_sprite"), pokemon_sprite)
		if index ~= 1 then
			gui.set_enabled(page[hash("pokemon/root")], false)
		end

		button.register(page["pokemon/exp_bg"], function()
			monarch.show("input", {}, {sender=msg.url(), message="update_exp", allowed_characters="[%d%+%-]", default_text=storage.get_pokemon_exp(pokemon_id)})
		end)
		
		button.register(page["pokemon/hp_bar_bg"], function()
			monarch.show("input", {}, {sender=msg.url(), message="update_hp", allowed_characters="[%d%+%-]", default_text=storage.get_pokemon_current_hp(pokemon_id)})
		end)
		
		table.insert(self.pokemons_list, {pokemon_id=pokemon_id, nodes=page, pokemon=pokemon_data})
		setup_page(self, page, pokemon_data, index-1)
	end
	if next(self.pokemons_list) ~= nil then
		for _, poke in pairs(self.pokemons_list) do
			activate_tab(self, poke.nodes, 1)
		end
	end
	if next(self.pokemons_list) ~= nil then
		party.current_pokemon = self.pokemons_list[1].pokemon_id
	end
	
	change_pokemon(self, party.last_active, true)
	
	local left_in_storage = #storage.list_of_ids_in_storage()
	for i=#storage.list_of_ids_in_inventory()+1, 6 do
		local pok_sprite = gui.get_node("party_indicator/pokemon_" .. i .. "/pokemon_sprite")
		gui.set_texture(pok_sprite, "gui")
		if left_in_storage > 0 then
			
			gui.play_flipbook(pok_sprite, "menu_add")
			button.register(pok_sprite, function()
				monarch.show("storage")
			end)
		else
			gui.set_color(pok_sprite, gui_colors.INACTIVE)
			gui.play_flipbook(pok_sprite, "sort_type")
		end
		gui.set_scale(pok_sprite, vmath.vector3(1))
		left_in_storage = left_in_storage - 1
	end

	gui.delete_node(self.pokemon_page)
end

function final(self)
	active_buttons = {}
	active_lists = {}
	node_index = 0
	button.unregister()
end

local function refresh_moves(self)
	local function _get_node(sub)
		local move_name = "pokemon/move_" .. index
		local n = nodes[move_name .. sub]
		gui.set_id(n, hash("move" .. node_index))
		node_index = node_index + 1
		return n
	end
	for i, pokemon_d in pairs(self.pokemons_list) do
		nodes = pokemon_d.nodes
		pokemon = pokemon_d.pokemon
		for name, move in pairs(_pokemon.get_moves(pokemon)) do
			index = move.index
			local move_data = _pokemon.get_move_data(pokemon, name)
			local pp_current = _get_node("/txt_pp_current")
			local pp_max = _get_node("/txt_pp_max")
			local pp_lbl = _get_node("/lbl_pp")
			update_pp(pp_lbl, pp_current, pp_max, pokemon, name)
		end
	end
end

function on_message(self, message_id, message)
	if message_id == hash("refresh") then
		refresh_moves(self)
	elseif message_id == hash("update_exp") then
		local current = self.pokemons_list[self.pokemon_index+1]
		local current_exp = _pokemon.get_exp(current.pokemon)
		local exp
		if string.find(message.str, "[+-]") ~= nil then
			exp = loadstring("return " .. current_exp .. message.str)()
		else
			exp = tonumber(message.str)
		end
		update_exp(self, exp)
	elseif message_id == hash("update_hp") then
		local current = self.pokemons_list[self.pokemon_index+1]
		local current_hp = _pokemon.get_current_hp(current.pokemon)
		local hp
		if string.find(message.str, "[+-]") ~= nil then
			hp = loadstring("return " .. current_hp .. message.str)() - current_hp
		else
			hp = tonumber(message.str) - current_hp
		end
		update_hp(self, current.nodes, current.pokemon, hp)
	end
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)

	for _, button in pairs(active_buttons) do
		gooey.button(button.node, action_id, action, button.func, button.refresh)
	end
	
	gooey.button("btn_edit", action_id, action, function()
		monarch.show("edit", {}, {id=party.current_pokemon})
	end, gooey_buttons.edit_button)
	
	gooey.button("btn_storage", action_id, action, function()
		monarch.show("storage")
	end)
	
	for _, list in pairs(active_lists) do
		if next(list.data) ~= nil then
			gooey.static_list(list.id, list.stencil, list.data, action_id, action, function() end, function() end)
		end
	end
	
	local g = gesture.on_input(self, action_id, action)
	if g then
		if g.swipe_right then
			self.pokemon_index =  math.max(self.pokemon_index - 1, 0)
			change_pokemon(self, self.pokemon_index)
		elseif g.swipe_left then
			self.pokemon_index = math.min(self.pokemon_index + 1, #storage.list_of_ids_in_inventory()-1)
			change_pokemon(self, self.pokemon_index)
		end
	end
end
