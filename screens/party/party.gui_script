local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"

local gesture = require "utils.gesture"
local url = require "utils.url"

local STATS = {"STR",  "INT", "DEX",  "WIS", "CON", "CHA"}

local function join_table(title, T, sep)
	if T then
		return title .. table.concat(T, sep)
	end
	return ""
end

local function to_mod(v)
	local value = math.floor((v - 10) / 2)
	if value >= 0 then
		value = "+" .. value
	end
	return value
end

local function show_description(desc)
	monarch.show("info", {}, {txt=desc})
end

local function setup_moves(self, nodes, pokemon)
	local index = 0
	local function _get_node(sub)
		local move_name = "pokemon/move_" .. index
		local n = nodes[move_name .. sub]
		return n
	end

	for name, move in pairs(_pokemon.get_moves(pokemon)) do
		local current_pp = move.pp
		index = move.index
		local move_data = _pokemon.get_move_data(pokemon, name)
		local pp_node = _get_node("/pp")
		button.register(_get_node("/btn_decease_pp"), function()
			_pokemon.decrease_move_pp(pokemon, name)
			gui.set_text(pp_node, "PP: " .. _pokemon.get_move_pp(pokemon, name))
		end)

		button.register(_get_node("/btn_reset_pp"), function()
			_pokemon.reset_move_pp(pokemon, name)
			gui.set_text(pp_node, "PP: " .. _pokemon.get_move_pp(pokemon, name))
		end)
		
		button.register(_get_node("/name"), function()
			show_description(move_data.description)
		end)
		
		gui.set_text(_get_node("/action"), move_data.time)
		gui.set_text(_get_node("/duration"), move_data.duration)
		gui.set_text(pp_node, "PP: " .. current_pp)

		if move_data.damage then
			gui.set_text(_get_node("/bonus"), "AB: " .. move_data.AB)
			gui.set_text(_get_node("/damage"), move_data.damage)
			if move_data.damage.save then
				if not data.AB then
					gui.set_enabled(_get_node("/bonus"), false)
				end
			end
		elseif move_data.save_dc then
			gui.set_text(_get_node("/damage"), "Save DC: " .. move_data.save_dc)
		else
			gui.set_text(_get_node("/damage"), "-")
			gui.set_text(_get_node("/bonus"), "-")
		end

		gui.set_text(_get_node("/name"), name)
		if move_data.stab then
			gui.set_color(_get_node("/name"), vmath.vector4(1, 1, .5, 1))
		end
		gui.set_text(_get_node("/range"), move_data.range)
	end
	for i=index+1, 5 do
		local n = nodes["pokemon/move_" .. i .. "/root"]
		gui.set_enabled(n, false)
	end
end

local function setup_abilities(self, nodes, pokemon)
	local index = 0
	local template = nodes["pokemon/ability/root"]
	local function _get_node(sub)
		local name = "pokemon/ability_" .. index
		local n = nodes[name .. sub]
		return n
	end
	local p = vmath.vector3()
	for _, name in pairs(_pokemon.get_abilities(pokemon)) do
		local desc = pokedex.get_ability_description(name)
		local root_node = gui.clone(nodes["pokemon/ability/root"])
		local name_node = gui.clone(nodes["pokemon/ability/name"])
		local desc_node = gui.clone(nodes["pokemon/ability/description"])

		gui.set_text(name_node, name)
		gui.set_text(desc_node, desc)
		
		gui.set_parent(name_node, root_node)
		gui.set_parent(desc_node, root_node)
		gui.set_position(root_node, p)
		p.y = p.y - gui.get_text_metrics_from_node(desc_node).height - gui.get_text_metrics_from_node(name_node).height
		index = index + 1
	end
	gui.set_enabled(template, false)
end

local function setup_info(self, nodes, pokemon)
	local abilities_string = ""
	local saving_throw_string = ""
	local st_attributes = _pokemon.get_saving_throw_attributes(pokemon)
	local total_attributes = _pokemon.get_attributes(pokemon)
	for i, stat in pairs(STATS) do
		abilities_string = abilities_string .. stat .. ": " .. total_attributes[stat]
		saving_throw_string = saving_throw_string .. stat .. ": " .. to_mod(st_attributes[stat])
		if math.fmod(i, 2) == 0 then
			abilities_string = abilities_string .. "\n"
			saving_throw_string = saving_throw_string .. "\n"
		else
			abilities_string = abilities_string .. "  "
			saving_throw_string = saving_throw_string .. "  "
		end
	end	
	
	gui.set_text(nodes["pokemon/attributes"], abilities_string)
	gui.set_text(nodes["pokemon/savingthrows"], saving_throw_string)
	
	gui.set_text(nodes["pokemon/stab"], "STAB: " .. _pokemon.get_STAB_bonus(pokemon))
	gui.set_text(nodes["pokemon/prof"], "Prof: " .. _pokemon.get_proficency_bonus(pokemon))
	gui.set_text(nodes["pokemon/skills"], table.concat(_pokemon.get_skills(pokemon), ", "))
end

local function update_hp(self, nodes, pokemon)
	local max = _pokemon.get_max_hp(pokemon)
	local current =_pokemon.get_current_hp(pokemon)
	gui.set_text(nodes["pokemon/hp_current"], "HP: " .. current)
	gui.set_text(nodes["pokemon/hp"], "/ " .. max)
end

local function setup_page(self, nodes, pokemon)
	button.register(nodes["pokemon/btn_hp_current"], function()
		local current =_pokemon.get_current_hp(pokemon)
		_pokemon.set_current_hp(pokemon, current-1)
		update_hp(self, nodes, pokemon)
	end)
	button.register(nodes["pokemon/btn_hp"], function()
		local current =_pokemon.get_current_hp(pokemon)
		_pokemon.set_current_hp(pokemon, current+1)
		update_hp(self, nodes, pokemon)
	end)
	
	gui.set_text(nodes["pokemon/species"], _pokemon.get_current_species(pokemon))
	gui.set_text(nodes["pokemon/level"], "lvl: " ..  _pokemon.get_current_level(pokemon))
	gui.set_text(nodes["pokemon/nature"], _pokemon.get_nature(pokemon))
	gui.set_text(nodes["pokemon/ac"], "AC: " .. _pokemon.get_AC(pokemon))

	update_hp(self, nodes, pokemon)
	local pos = vmath.vector3()
	local vul = nodes["pokemon/vulnerabilities"]
	local imm = nodes["pokemon/immunities"]
	local res = nodes["pokemon/resistances"]
	gui.set_text(vul, join_table("Vulnerabilities: ", _pokemon.get_vulnerabilities(pokemon), ", "))
	
	pos.y = pos.y - gui.get_text_metrics_from_node(vul).height * 0.7
	gui.set_text(res, join_table("Resistances: ", _pokemon.get_resistances(pokemon), ", "))
	gui.set_position(res, pos)
	
	pos.y = pos.y - gui.get_text_metrics_from_node(res).height * 0.7
	gui.set_text(imm, join_table("Immunities: ", _pokemon.get_immunities(pokemon), ", "))
	gui.set_position(imm, pos)

	setup_moves(self, nodes, pokemon)
	setup_abilities(self, nodes, pokemon)
	setup_info(self, nodes, pokemon)
end

local function activate_tab(self, page, tab_number)
	for i=1, 3 do
		if tab_number == i then
			gui.set_enabled(page["pokemon/tab_bg_" .. i], true)
		else
			gui.set_enabled(page["pokemon/tab_bg_" .. i], false)
		end
	end
end

local function add_pokemon_page(self, pokemon_id, index)
	local page = gui.clone_tree(self.pokemon_page)
	local p = vmath.vector3()
	p.x = (index-1) * 720
	gui.set_position(page["pokemon/root"], p)
	button.register(page["pokemon/tab_1"], function()
		activate_tab(self, page, 1)
	end)
	button.register(page["pokemon/tab_2"], function()
		activate_tab(self, page, 2)
	end)
	button.register(page["pokemon/tab_3"], function()
		activate_tab(self, page, 3)
	end)
	return page
end

function init(self)
	button.acquire()
	self.pokemon_page = gui.get_node("pokemon/root")
	self.pokemons_list = {}
	self.pokemon_index = 0
	msg.post(url.SWITCHER, "activate", {screen="party"})
	button.register("btn_edit", function()
		monarch.show("edit", {}, {id=self.pokemons_list[self.pokemon_index+1].pokemon_id})
	end)
	
	for index, pokemon_id in pairs(storage.list_of_ids_in_inventory()) do
		local page = add_pokemon_page(self, pokemon_id, index)
		local pokemon_data = storage.get_copy(pokemon_id)
		local pokemon_sprite, texture = _pokemon.get_sprite(pokemon_data)
		gui.set_texture(page["pokemon/pokemon_sprite"], texture)
		gui.play_flipbook(page["pokemon/pokemon_sprite"], pokemon_sprite)
		
		if index ~= 1 then
			gui.set_enabled(page[hash("pokemon/root")], false)
		end
		table.insert(self.pokemons_list, {pokemon_id=pokemon_id, nodes=page, pokemon=pokemon_data})
		setup_page(self, page, pokemon_data)
	end
	if next(self.pokemons_list) ~= nil then
		for _, poke in pairs(self.pokemons_list) do
			activate_tab(self, poke.nodes, 1)
		end
		
	end

	gui.delete_node(self.pokemon_page)
end

function final(self)
	button.unregister()
end

local function change_pokemon(self)
	local r = gui.get_node("scroll")
	local p = vmath.vector3()
	p.x = self.pokemon_index * -720
	gui.set_enabled(self.pokemons_list[self.pokemon_index+1].nodes[hash("pokemon/root")], true)
	gui.animate(r, "position", p, gui.EASING_INSINE, 0.2, 0, function()
		for i, d in pairs(self.pokemons_list) do
			if i == self.pokemon_index then --else
				gui.set_enabled(self.pokemons_list[i].nodes[hash("pokemon/root")], false)
			end
		end
	end)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	local g = gesture.on_input(self, action_id, action)
	if g then
		if g.swipe_right then
			self.pokemon_index =  math.max(self.pokemon_index - 1, 0)
			change_pokemon(self)
		elseif g.swipe_left then
			self.pokemon_index = math.min(self.pokemon_index + 1, #storage.list_of_ids_in_inventory()-1)
			change_pokemon(self)
		end
	end
end
