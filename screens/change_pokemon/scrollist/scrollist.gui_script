local button = require "utils.button"
local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local utils = require "utils.utils"
local gui_colors = require "utils.gui_colors"
local movedex = require "pokedex.moves"
local pokedex = require "pokedex.pokedex"

local selected_item
local sender
local message_id

local function update_listitem(list, item)
	gui.set_text(item.nodes["scrollist/txt_item"], tostring(item.data or "-"))
	if item.index == list.selected_item then
		selected_item = item.data
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
	end
end

local function on_item_selected(list)
	for i,item in ipairs(list.items) do
		if item.index == list.selected_item then
			msg.post(sender, message_id, {item=item.data})
			monarch.back()
		end
	end
end


local function update_radio(radio)
	if not radio then
		return 
	end
	if radio.selected then
		gui.set_color(radio.node, gui_colors.BLACK)
	else
		gui.set_color(radio.node, gui_colors.WHITE)
	end
end

local function update_checkbox(checkbox)
	if checkbox.checked then
		gui.set_color(checkbox.node, gui_colors.BLACK)
	else
		gui.set_color(checkbox.node, gui_colors.WHITE)
	end
end

local function filter_out_current_moves(self, list_of_moves)
	list_of_moves = utils.shallow_copy(list_of_moves)
	for move, _ in pairs(self.current_moves) do
		for i, selected_move in pairs(list_of_moves) do
			if move == selected_move then
				table.remove(list_of_moves, i)
			end
		end
	end
	return list_of_moves
end

function init(self)
	msg.post(url.MENU, "hide")
	local d = monarch.data("moves_scrollist")
	sender = d.sender
	message_id = d.message_id
	self.level = d.level
	self.species = d.species
	self.current_moves = d.current_moves
	self.sub_list = "current"
	local starting_moves = pokedex.get_pokemons_moves(self.species, self.level)
	self.all_items = filter_out_current_moves(self, starting_moves)
	self.list_items = utils.shallow_copy(self.all_items)
	
	pprint(starting_moves)
	update_list(gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.list_items))
	button.acquire()
	button.register("scrollist/btn_quit", function()
		monarch.back()
	end)
	update_radio(gooey.radio("available_mark").set_selected(true))
	update_radio(gooey.radio("current_mark").set_selected(true))
end

function final(self)
	button.unregister()
end

local function filter_list(self, search_string)
	local function starts_with(str, start)
		return string.lower(str):sub(1, #start) == string.lower(start)
	end
	local function is_in(_in, str)
		return string.lower(_in):find(string.lower(str))
	end
	if #search_string > 0 then
		self.list_items = {}
		for i=#self.all_items, 1, -1 do
			if starts_with(self.all_items[i], search_string) then
				table.insert(self.list_items, 1, self.all_items[i])
			end
		end
		update_list(gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.list_items))
	else
		self.list_items = self.all_items
	end
end

local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		gui.set_text(input.node, "search")
	end

	local cursor = gui.get_node("scrollist/cursor")
	if input.selected then
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(0,0,0,1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
	filter_list(self, input.text)
end

local function set_enabled_options(enabled)
	local color = vmath.vector4(0.5, 0.5, 0.5, 1)
	if enabled then
		color = gui_colors.BLACK
	end
	gui.set_enabled(gui.get_node("box3"), enabled)
	gui.set_enabled(gui.get_node("box2"), enabled)
	gui.set_enabled(gui.get_node("box1"), enabled)
	gui.set_color(gui.get_node("txt_current_level"), color)
	gui.set_color(gui.get_node("txt_max_lvl"), color)
	gui.set_color(gui.get_node("txt_mm"), color)
end



local function set_all_moves(self)
	self.all_items = filter_out_current_moves(self, movedex.list)
	set_enabled_options(false)
	update_list(gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.all_items))
end

local function set_current(self)
	self.sub_list = "current"
	self.all_items = filter_out_current_moves(self, pokedex.get_pokemons_moves(self.species, self.level))
	update_list(gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.all_items))
end


local function set_max(self)
	self.sub_list = "max"
	self.all_items = filter_out_current_moves(self, pokedex.get_pokemons_moves(self.species, 20))
	update_list(gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.all_items))
end

local function set_available(self)
	set_enabled_options(true)
	if self.sub_list == "max" then
		set_max(self)
	elseif self.sub_list == "current" then
		set_current(self)
	end
end

local function include_mm(self, checkbox)
	if checkbox.checked then
		local move_machines = pokedex.get_move_machines(self.species)
		for _, m in pairs(move_machines) do
			local exists = false
			for _, n in pairs(self.all_items) do
				if n == m then
					exists = true
				end
			end
			if not exists then
				table.insert(self.all_items, m)
			end
		end	
	else
		set_available(self)
	end
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if next(self.list_items) ~= nil then
		gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.list_items, action_id, action, on_item_selected, update_list)
	end
	gooey.input("scrollist/search_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, nil, function(input)
		refresh_input(self, input, "search_text")
	end)
	gooey.radiogroup("MAIN", action_id, action, function()
		gooey.radio("available_mark", "MAIN", action_id, action, function() set_available(self) end, update_radio)
		gooey.radio("all_mark", "MAIN", action_id, action, function() set_all_moves(self) end, update_radio)
	end)
	gooey.radiogroup("SUB", action_id, action, function()
		gooey.radio("current_mark", "SUB", action_id, action, function() set_current(self) end, update_radio)
		gooey.radio("max_mark", "SUB", action_id, action, function() set_max(self) end, update_radio)
	end)
	gooey.checkbox("mm_mark", action_id, action, function(checkbox) include_mm(self, checkbox) end, update_checkbox)
end
