local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local monarch = require "monarch.monarch"
local button = require "utils.button"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local url = require "utils.url"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"

local function pokemon_image(species)
	local pokemon_sprite, texture = pokedex.get_sprite(species)
	gui.set_texture(gui.get_node("change_pokemon/pokemon_sprite"), "sprite0")
	gui.play_flipbook(gui.get_node("change_pokemon/pokemon_sprite"), pokemon_sprite)
	gui.set_scale(gui.get_node("change_pokemon/pokemon_sprite"), vmath.vector3(3))
end

local function save_pokemon(self)
	_pokemon.add_hp_from_levels(self.pokemon, self.level)
	_pokemon.update_increased_attributes(self.pokemon, self.increased_attributes)
	local nickname = gui.get_text(gui.get_node("name_text"))
	
	self.pokemon.level.current = self.level
	_pokemon.save(self.pokemon)
	_pokemon.set_nickname(self.pokemon, nickname)
	monarch.show("party")
end

local function evolve(self, species)
	-- Set and reset
	self.pokemon.moves = self.pokemon_copy.moves
	pokemon_image(species)
	self.have_evolved = true
	gui.set_enabled(self.evolve_button, false)

	-- Edit pokemon
	self.ability_score_improvment = self.ability_score_improvment - pokedex.evolve_points(_pokemon.get_current_species(self.pokemon))
	_pokemon.add_hp_from_levels(self.pokemon, self.level)
	self.pokemon.level.current = self.level
	_pokemon.evolve(self.pokemon, species, self.level)

	pokemon_edit.redraw(self)
end

local function change_hp(self, hp)
	local max = _pokemon.get_max_hp(self.pokemon)
	_pokemon.set_max_hp(self.pokemon, max + hp, true)
	local c = _pokemon.get_current_hp(self.pokemon)
	_pokemon.set_current_hp(self.pokemon, c + hp)
	gui.set_text(gui.get_node("change_pokemon/txt_max_hp"), "Max Hp: " .. _pokemon.get_max_hp(self.pokemon))
end

function init(self)
	msg.post(url.MENU, "hide")
	self.have_evolved = false
	button.acquire()
	local pokemon_id = monarch.data("edit").id
	self.pokemon_copy = storage.get_copy(pokemon_id)
	pokemon_edit.init(self,storage.get_copy(pokemon_id))
	
	self.level = _pokemon.get_current_level(self.pokemon_copy)
	self.nickname = _pokemon.get_nickname(self.pokemon_copy)
	local species = _pokemon.get_current_species(self.pokemon_copy)
	self.nickname = self.nickname or species
	gui.set_text(gui.get_node("name_text"), self.nickname)
	
	gui.set_text(gui.get_node("change_pokemon/txt_level"), "Lv. " .. _pokemon.get_current_level(self.pokemon_copy))
	gui.set_color(gui.get_node("change_pokemon/txt_level_mod"), gui_colors.GREEN)
	self.evolve_button = gui.get_node("btn_evolve")
	pokemon_image(_pokemon.get_current_species(self.pokemon_copy))
	gui.set_text(gui.get_node("change_pokemon/nature"), _pokemon.get_nature(self.pokemon_copy))
	gui.set_text(gui.get_node("change_pokemon/txt_max_hp"), "Max Hp: " .. _pokemon.get_max_hp(self.pokemon_copy))
	gui.set_text(gui.get_node("change_pokemon/txt_hit_dice"), "Hit Dice: d" .. _pokemon.get_hit_dice(self.pokemon_copy))

	function self.redraw(self)
		if not self.have_evolved and pokedex.get_evolution_possible(_pokemon.get_current_species(self.pokemon_copy)) and 
		pokedex.get_evolution_level(_pokemon.get_current_species(self.pokemon_copy)) <= self.level then
			gui.set_enabled(self.evolve_button, true)
		else
			gui.set_enabled(self.evolve_button, false)
		end
		gui.set_text(gui.get_node("change_pokemon/txt_level"), "Lv. " .. _pokemon.get_current_level(self.pokemon_copy))
		if self.level - _pokemon.get_current_level(self.pokemon_copy)> 0 then
			gui.set_text(gui.get_node("change_pokemon/txt_level_mod"), "+" .. self.level - _pokemon.get_current_level(self.pokemon_copy))
		else
			gui.set_text(gui.get_node("change_pokemon/txt_level_mod"), "" )
		end
	end

	button.register("change_pokemon/txt_max_hp", function()
		monarch.show("info", nil, {text="To increase HP\nRoll (or take the average of) the hit die and add your CON modifier."})
	end)

	pokemon_edit.register_buttons_after_nature(self)
	pokemon_edit.register_buttons_after_species(self)
	pokemon_edit.redraw(self)
end

function final(self)
	pokemon_edit.final(self)
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
	if message_id == hash("response") and message.response then
		if type(message.data) == "string" then
			evolve(self, message.data)
		else
			change_hp(self, message.data)
		end
	end
end

local function evolve_pokemon(self)
	local evolve_into = pokedex.get_evolutions(_pokemon.get_current_species(self.pokemon_copy))
	if #evolve_into == 1 then
		monarch.show("are_you_sure", nil, {title="Evolve at level ".. self.level .. "?", sender=msg.url(), data=evolve_into[1]})
	else
		monarch.show("scrollist", {}, {items=evolve_into, message_id="evolve", sender=msg.url()})
	end
end


local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		gui.set_text(input.node, self.nickname)
	end

	local cursor = gui.get_node("cursor")
	if input.selected then
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(0,0,0,1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
	--filter_list(self, input.text)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(action_id, action)
	gooey.button("change_pokemon/hp/btn_minus", action_id, action, function()
		if _pokemon.get_max_hp_edited(self.pokemon) then
			change_hp(self, -1)
		else
			monarch.show("are_you_sure", nil, {title="Are you sure?", text="You will have to track it manually henceforth", sender=msg.url(), data=-1})
		end
	end, gooey_buttons.minus_button)
	
	gooey.button("change_pokemon/hp/btn_plus", action_id, action, function()
		if _pokemon.get_max_hp_edited(self.pokemon) then
			change_hp(self, 1)
		else
			monarch.show("are_you_sure", nil, {title="Are you sure?", text="You will have to track it manually henceforth", sender=msg.url(), data=1})
		end
	end, gooey_buttons.plus_button)

	gooey.input("name_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, nil, function(input)
		refresh_input(self, input, "name_text")
	end)
	
	gooey.button("btn_edit", action_id, action, function()
		save_pokemon(self)
	end, gooey_buttons.green_button)

	gooey.button("btn_evolve", action_id, action, function()
		evolve_pokemon(self)
	end, gooey_buttons.common_button)

end
