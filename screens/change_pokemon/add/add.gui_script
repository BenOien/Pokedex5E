local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local button = require "utils.button"
local natures = require "pokedex.natures"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local pokedex = require "pokedex.pokedex"
local url = require "utils.url"
local _pokemon = require "pokedex.pokemon"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"

HAVE_EVOLVED = false

local active_buttons = {}

local function get_max_hp(pokemon, to_level)
	local current = _pokemon.get_max_hp(pokemon)
	local hit_dice = _pokemon.get_hit_dice(pokemon)
	local con = _pokemon.get_attributes(pokemon).CON
	local con_mod = math.floor((con - 10) / 2)

	local levels_gained = to_level - _pokemon.get_current_level(pokemon)
	local from_hit_dice = math.ceil(hit_dice / 2) * levels_gained
	local from_con_mod = con_mod * levels_gained
	return current + from_hit_dice + from_con_mod
end

local function add_pokemon(self)
	if self.pokemon.nature ~= nil and self.pokemon.species.current ~= "" then
		self.pokemon.hp.max = get_max_hp(self.pokemon, self.level)
		self.pokemon.level.caught = self.level
		self.pokemon.level.current = self.level

		self.pokemon.attributes.increased = self.increased_attributes
		storage.add(self.pokemon)
		monarch.show("party")
	end
end

function init(self)
	msg.post(url.MENU, "hide")
	button.acquire()
	gui.set_color(gui.get_node("change_pokemon/species"), gui_colors.HERO_TEXT_FADED)
	gui.set_color(gui.get_node("change_pokemon/nature"), gui_colors.HERO_TEXT_FADED)
	gui.play_flipbook(gui.get_node("btn_add"), "common_down")
	gui.get_color(gui.get_node("txt_add"), gui_colors.HERO_TEXT_FADED)
	
	function self.redraw(self)
		local nature_node = gui.get_node("change_pokemon/nature")
		gui.set_text(nature_node, self.pokemon.nature)
	end

	function self.register_buttons_after_species(self)
		button.register("change_pokemon/nature", function()
			monarch.show("scrollist", {}, {items=natures.list, message_id="nature", sender=msg.url()})
		end)
	end
	
	function self.register_buttons_after_nature(self)
		gui.play_flipbook(gui.get_node("btn_add"), "common_up")
		gui.get_color(gui.get_node("txt_add"), gui_colors.HERO_TEXT)
		local b = {node="btn_add", func=function() add_pokemon(self) end, refresh=gooey_buttons.common_button}
		table.insert(active_buttons, b)
	end

	if storage.get_total() == 0 then
		gui.set_enabled(gui.get_node("change_pokemon/btn_close"), false)
	end

	pokemon_edit.init(self)

	button.register("change_pokemon/btn_species", function()
		monarch.show("scrollist", {}, {items=pokedex.list, message_id="species", sender=msg.url()})
	end)

	pokemon_edit.redraw(self)
end

function final(self)
	pokemon_edit.final(self)
	button.unregister()
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(action_id, action)
	for _, button in pairs(active_buttons) do
		gooey.button(button.node, action_id, action, button.func, button.refresh)
	end
end
