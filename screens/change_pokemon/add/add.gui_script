local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local button = require "utils.button"
local natures = require "pokedex.natures"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local pokedex = require "pokedex.pokedex"
local url = require "utils.url"
local _pokemon = require "pokedex.pokemon"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local notify = require "utils.notify"


HAVE_EVOLVED = false

local active_buttons = {}

local function get_max_hp(pokemon, to_level)
	local current = _pokemon.get_max_hp(pokemon)
	local hit_dice = _pokemon.get_hit_dice(pokemon)
	local con = _pokemon.get_attributes(pokemon).CON
	local con_mod = math.floor((con - 10) / 2)

	local levels_gained = to_level - _pokemon.get_current_level(pokemon)
	local from_hit_dice = math.ceil(hit_dice / 2) * levels_gained
	local from_con_mod = con_mod * levels_gained
	return current + from_hit_dice + from_con_mod
end

local function add_pokemon(self)
	if self.pokemon.nature ~= nil and self.pokemon.species.current ~= "" then
		self.pokemon.hp.max = get_max_hp(self.pokemon, self.level)
		self.pokemon.level.caught = self.level
		self.pokemon.level.current = self.level

		self.pokemon.attributes.increased = self.increased_attributes

		local abilities = {}
		for _, data in pairs(self.ability_data) do
			if data.name ~= "Add Other" then
				table.insert(abilities, data.name)
			end
		end
		_pokemon.update_abilities(self.pokemon, abilities)

		local feats = {}
		for _, data in pairs(self.feats_data) do
			if data.name ~= "Add Other" then
				table.insert(feats, data.name)
			end
		end
		_pokemon.update_feats(self.pokemon, feats)

		
		storage.add(self.pokemon)
		if storage.is_party_full() then
			notify.notify(self.pokemon.species.current .. " added to PC")
		else
			notify.notify(self.pokemon.species.current .. " added to party")
		end
		local from = monarch.top(-1)
		if from == hash("pick_name") or from == hash("add") then
			monarch.show("party")
		else
			monarch.back()
		end
	end
end

function init(self)
	button.acquire()
	gui.set_color(gui.get_node("change_pokemon/species"), gui_colors.HERO_TEXT_FADED)
	gui.set_color(gui.get_node("change_pokemon/txt_nature"), gui_colors.HERO_TEXT_FADED)
	gui.play_flipbook(gui.get_node("btn_add"), "common_down")
	gui.get_color(gui.get_node("txt_add"), gui_colors.HERO_TEXT_FADED)
	gui.set_enabled(gui.get_node("change_pokemon/cursor"), false)
	pokemon_edit.config[hash("change_pokemon/extra")].active = false
	
	function self.register_buttons_after_species(self)
		gui.set_enabled(gui.get_node("blocker"), false)
		gui.set_text(gui.get_node("change_pokemon/pokemon_number"), string.format("#%03d", _pokemon.get_index_number(self.pokemon)))
		gui.play_flipbook(gui.get_node("btn_add"), "common_up")
		gui.get_color(gui.get_node("txt_add"), gui_colors.HERO_TEXT)
		local b = {node="btn_add", func=function() add_pokemon(self) end, refresh=function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end}
		table.insert(active_buttons, b)
	end

	if storage.get_total() == 0 then
		gui.set_enabled(gui.get_node("change_pokemon/btn_close"), false)
	end
	
	button.register("change_pokemon/btn_species", function()
		monarch.show("scrollist", {}, {items=pokedex.list, message_id="species", sender=msg.url(), title="Pick your Pokemon"})
	end)
	
	pokemon_edit.init(self)
	pokemon_edit.redraw(self)
end

function final(self)
	active_buttons = {}
	pokemon_edit.final(self)
	button.unregister()
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(self, action_id, action)
	for _, button in pairs(active_buttons) do
		gooey.button(button.node, action_id, action, button.func, button.refresh)
	end
end
