local button = require "utils.button"
local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local natures = require "pokedex.natures"
local pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"

local utils = require "utils.utils"

local selected_item
local STATS = {"STR", "DEX", "CON", "INT", "WIS", "CHA"}
local function redraw(self)
	for _, stat in pairs(STATS) do
		gui.set_text(gui.get_node(stat), stat .." +" .. self.pokemon[stat])
	end

	local level_node = gui.get_node("txt_level")
	gui.set_text(level_node, "Level " .. self.pokemon.level)

	local nature_node = gui.get_node("nature")
	gui.set_text(nature_node, "Nature: " .. self.pokemon.nature)

	local species_node = gui.get_node("spicies")
	local max_improve_node = gui.get_node("asi_title")
	if self.pokemon.species == "" then
		gui.set_text(species_node, "PokÃ©mon")
		gui.set_text(max_improve_node, "Available Points: 0")
	else
		local available_at_min_level = pokemon.level_data(pokedex.minumum_level(self.pokemon.species)).ASI
		local available_at_current_level = pokemon.level_data(self.pokemon.level).ASI
		local available = (available_at_current_level - available_at_min_level) * 2
		gui.set_text(species_node, self.pokemon.species)
		gui.set_text(max_improve_node, "Available Points: " .. available - self.ability_score_improvment)
	end
	
	local move_1_node = gui.get_node("move_1")
	local move_2_node = gui.get_node("move_2")
	local move_3_node = gui.get_node("move_3")
	local move_4_node = gui.get_node("move_4")
	gui.set_text(move_1_node, self.pokemon.moves[1])
	gui.set_text(move_2_node, self.pokemon.moves[2])
	gui.set_text(move_3_node, self.pokemon.moves[3])
	gui.set_text(move_4_node, self.pokemon.moves[4])
end

local function increase(self, stat)
	self.pokemon[stat] = self.pokemon[stat] + 1
	self.ability_score_improvment = self.ability_score_improvment + 1
	redraw(self)
end

local function decrease(self, stat)
	if self.pokemon[stat] > 0 then
		self.pokemon[stat] = self.pokemon[stat] - 1
		self.ability_score_improvment = self.ability_score_improvment - 1
		redraw(self)
	end
end

local function pick_move(self, number)
	if pokedex.is_pokemon(self.pokemon.species) then
		gui.set_enabled(self.root, false)
		gui.set_position(self.scrollist, vmath.vector3())
		self.state = 3
		local available_moves = pokedex.get_pokemons_moves(self.pokemon.species, self.pokemon.level)
		for _, move in pairs(self.pokemon.moves) do
			for i, selected_move in pairs(available_moves) do
				if move == selected_move then
					table.remove(available_moves, i)
				end
			end
		end
		self.list_items = available_moves

		self.pokemon.moves[number] = selected_item
		redraw(self)
	end
end

function init(self)
	button.acquire()
	self.pokemon = {species="", level=1, nature="", STR=0, DEX=0, CON=0, INT=0, WIS=0, CHA=0, moves={"None", "None", "None", "None"}}
	self.ability_score_improvment = 0
	self.list_items = {}
	self.state = 0
	self.move_button_index = 0

	self.root = gui.get_node("root")
	self.scrollist = gui.get_node("scrollist/root")

	button.register("btn_str_reduce", function()
		decrease(self, "STR")
	end)
	button.register("btn_str_increase", function()
		increase(self, "STR")
	end)
	button.register("btn_dex_reduce", function()
		decrease(self, "DEX")
	end)
	button.register("btn_dex_increase", function()
		increase(self, "DEX")
	end)
	button.register("btn_con_reduce", function()
		decrease(self, "CON")
	end)
	button.register("btn_con_increase", function()
		increase(self, "CON")
	end)
	button.register("btn_int_reduce", function()
		decrease(self, "INT")
	end)
	button.register("btn_int_increase", function()
		increase(self, "INT")
	end)
	button.register("btn_wis_reduce", function()
		decrease(self, "WIS")
	end)
	button.register("btn_wis_increase", function()
		increase(self, "WIS")
	end)
	button.register("btn_cha_reduce", function()
		decrease(self, "CHA")
	end)
	button.register("btn_cha_increase", function()
		increase(self, "CHA")
	end)

	button.register("btn_level_increase", function()
		if pokedex.is_pokemon(self.pokemon.species) and self.pokemon.level < 20 then
			self.pokemon.level = self.pokemon.level + 1
			redraw(self)
		end
	end)
	button.register("btn_level_reduce", function()
		if pokedex.is_pokemon(self.pokemon.species) then
			if self.pokemon.level > 1 and self.pokemon.level > pokedex.minumum_level(self.pokemon.species) then
				self.pokemon.level = self.pokemon.level - 1
				redraw(self)
			end
		end
	end)

	button.register("btn_spicies", function()
		gui.set_enabled(self.root, false)
		gui.set_position(self.scrollist, vmath.vector3())
		self.list_items = pokedex.list
		self.state = 2
	end)
	
	button.register("btn_nature", function()
		gui.set_enabled(self.root, false)
		gui.set_position(self.scrollist, vmath.vector3())
		self.state = 1
		self.list_items = natures.list
	end)

	button.register("scrollist/btn_okay", function()
		gui.set_enabled(self.root, true)
		gui.set_position(self.scrollist, vmath.vector3(720, 0, 0))
		
		if self.state == 1 then
			if natures.is_nature(selected_item) then
				self.pokemon.nature = selected_item
			end
		elseif self.state == 2 then
			if pokedex.is_pokemon(selected_item) then
				self.pokemon.species = selected_item
				self.pokemon.moves = {"None", "None", "None", "None"}
				self.pokemon.level = pokedex.minumum_level(selected_item) > self.pokemon.level and pokedex.minumum_level(selected_item) or self.pokemon.level
			end
		elseif self.state == 3 then
			self.pokemon.moves[self.move_button_index] = selected_item
		end
		self.list_items = {}
		gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", {})
		selected_item = "None"
		redraw(self)
	end)

	button.register("scrollist/btn_quit", function()
		gui.set_enabled(self.root, true)
		gui.set_position(self.scrollist, vmath.vector3(720, 0, 0))
		selected_item = "None"
		self.list_items = {}
		gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", {})
	end)
	
	button.register("move_1", function()
		self.move_button_index = 1
		pick_move(self, 1)
	end)

	button.register("move_2", function()
		self.move_button_index = 2
		pick_move(self, 2)
	end)

	button.register("move_3", function()
		self.move_button_index = 3
		pick_move(self, 3)
	end)

	button.register("move_4", function()
		self.move_button_index = 4
		pick_move(self, 4)
	end)

	button.register("btn_add", function()
		if self.pokemon.nature ~= "" and self.pokemon.species ~= "" then
			storage.add(self.pokemon)
			self.pokemon = {species="", level=1, nature="", STR=0, DEX=0, CON=0, INT=0, WIS=0, CHA=0, moves={"None", "None", "None", "None"}}
			redraw(self)
		end
	end)

	redraw(self)
end

function final(self)
	button.unregister()
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

local function update_listitem(list, item)
	if item.index == list.selected_item then
		gui.set_color(item.nodes[hash(list.id .. "/txt_item")], vmath.vector3(1, 1, 0, 1))
		selected_item = item.data
	else
		gui.set_color(item.nodes[hash(list.id .. "/txt_item")], vmath.vector3(1, 1, 1, 1))
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
		gui.set_text(item.nodes[hash(list.id .. "/txt_item")], tostring(item.data or "-"))
	end
end

local function on_item_selected(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
	end
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if next(self.list_items) ~= nil then
		gooey.dynamic_list("scrollist", "scrollist/scroll_area", "scrollist/btn_item", self.list_items, action_id, action, on_item_selected, update_list)
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
