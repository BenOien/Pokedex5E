local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local url = require "utils.url"
local gro = require "utils.gui_render_order"
local party = require "screens.party.party"
local _pokemon = require "pokedex.pokemon"
local storage = require "pokedex.storage"

local function hide(self)
	gui.set_enabled(gui.get_node("root"), false)
end

local function show(self)
	gui.set_enabled(gui.get_node("root"), true)
end

local function toggle(self)
	button.acquire()
	self.toggle = not self.toggle
	gui.set_enabled(self.menu, self.toggle)
	if self.toggle then
		gui.play_flipbook(self.btn_menu, "close_up")
	else
		gui.play_flipbook(self.btn_menu, "menu_up")
	end
end

local function menu(self)
	local top = monarch.top()
	if top == hash("party") then
		gui.set_enabled(self.btn_edit, true)
		gui.set_enabled(self.btn_reset, true)
		gui.set_position(self.sub, vmath.vector3(0, -388, 0))
	else
		gui.set_enabled(self.btn_edit, false)
		gui.set_enabled(self.btn_reset, false)
		gui.set_position(self.sub, vmath.vector3(0, -225, 0))
	end
end

function init(self)
	button.acquire()
	gui.set_render_order(gro.MENU)
	url.MENU = msg.url()
	self.toggle = false
	self.btn_party = gui.get_node("btn_party")
	self.btn_storage = gui.get_node("btn_storage")
	self.btn_profiles = gui.get_node("btn_profiles")
	self.btn_about = gui.get_node("btn_about")
	self.btn_edit = gui.get_node("btn_edit")
	self.btn_reset = gui.get_node("btn_reset")
	self.btn_menu = gui.get_node("btn_menu")
	
	self.sub = gui.get_node("sub")
	self.menu = gui.get_node("menu")
	gui.set_enabled(self.menu, false)
	menu(self)
	local name = profiles.get_active_name() or "Someone"
	gui.set_text(self.btn_storage, name .. "'s PC")
	button.register(self.btn_menu, function()
		toggle(self)
		menu(self)
	end)
	
	button.register(self.btn_party, function()
		monarch.show("party", {clear=true})
		toggle(self)
	end)

	button.register(self.btn_storage, function()
		monarch.show("storage", {clear=true})
		toggle(self)
	end)

	button.register(self.btn_about , function()
		monarch.show("about",{clear=true})
		toggle(self)
	end)
	
	button.register(self.btn_profiles, function()
		monarch.show("profiles", {clear=true})
		toggle(self)
	end)

	button.register(self.btn_edit, function()
		monarch.show("edit", {clear=true}, {id=party.current_pokemon})
		toggle(self)
	end)

	button.register(self.btn_reset, function()
		local pokemon = storage.get_copy(party.current_pokemon)
		_pokemon.reset(pokemon)
		toggle(self)
	end)

	button.register("btn_add", function()
		monarch.show("add", {clear=true})
		toggle(self)
	end)
end

function final(self)
	button.unregister()
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if self.toggle and not gui.pick_node(gui.get_node("menu"), action.x, action.y) and hash("touch") and action.pressed then
		toggle(self)
	end
	return self.toggle
end

function on_message(self, message_id, message)
	if message_id == hash("show") then
		local name = profiles.get_active_name() or "Someone"
		gui.set_text(self.btn_storage, name .. "'s PC")
		show(self)
	elseif message_id == hash("hide") then
		hide(self)
	end
end

