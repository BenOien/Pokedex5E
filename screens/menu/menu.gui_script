local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local url = require "utils.url"
local gro = require "utils.gui_render_order"
local party = require "screens.party.party"
local _pokemon = require "pokedex.pokemon"
local storage = require "pokedex.storage"

local ENABLED = vmath.vector4(236/255, 158/255, 41/255, 1)
local DISABLED = vmath.vector4(253/255, 241/255, 220/255, 1)

local function party_active(self)
	gui.set_color(self.btn_party, ENABLED)
	gui.set_color(self.btn_storage, DISABLED)
	gui.set_color(self.btn_add, DISABLED)
	gui.set_color(self.btn_profiles, DISABLED)
end

local function storage_active(self)
	gui.set_color(self.btn_party, DISABLED)
	gui.set_color(self.btn_storage, ENABLED)
	gui.set_color(self.btn_add, DISABLED)
	gui.set_color(self.btn_profiles, DISABLED)
end

local function toggle(self)
	button.acquire()
	self.toggle = not self.toggle
	gui.set_enabled(self.menu, self.toggle)
end

local function menu(self)
	local top = monarch.top()
	if top == hash("party") then
		gui.set_enabled(self.btn_edit, true)
		gui.set_enabled(self.btn_reset, true)
		gui.set_position(self.sub, vmath.vector3(40, -289, 0))
	else
		gui.set_enabled(self.btn_edit, false)
		gui.set_enabled(self.btn_reset, false)
		gui.set_position(self.sub, vmath.vector3(40, -175, 0))
	end
end

function init(self)
	button.acquire()
	gui.set_render_order(gro.MENU)
	self.toggle = false
	self.btn_party = gui.get_node("btn_party")
	self.btn_storage = gui.get_node("btn_storage")
	self.btn_profiles = gui.get_node("btn_profiles")
	self.btn_about = gui.get_node("btn_about")
	self.btn_edit = gui.get_node("btn_edit")
	self.btn_reset = gui.get_node("btn_reset")
	self.btn_menu = gui.get_node("btn_menu")
	
	self.sub = gui.get_node("sub")
	self.menu = gui.get_node("menu")
	gui.set_enabled(self.menu, false)
	menu(self)
	gui.set_text(gui.get_node("txt_pc"), profiles.get_active_name() .. "'s PC")
	button.register(self.btn_menu, function()
		toggle(self)
		menu(self)
	end)
	
	button.register(self.btn_party, function()
		monarch.show("party", {clear=true})
		toggle(self)
	end)

	button.register(self.btn_storage, function()
		monarch.show("storage", {clear=true})
		toggle(self)
	end)

	button.register(self.btn_about , function()
		--monarch.show("about",{clear=true})
	end)
	
	button.register(self.btn_profiles, function()
		monarch.show("profiles", {clear=true})
		toggle(self)
	end)

	button.register(self.btn_edit, function()
		monarch.show("edit", {clear=true}, {id=party.current_pokemon})
		toggle(self)
	end)

	button.register(self.btn_reset, function()
		local pokemon = storage.get_copy(party.current_pokemon)
		pprint(party.current_pokemon, pokemon)
		_pokemon.reset(pokemon)
		toggle(self)
	end)

	button.register("btn_add", function()
		monarch.show("add", {clear=true})
		toggle(self)
	end)
end

function final(self)
	button.unregister()
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if self.toggle and not gui.pick_node(gui.get_node("menu"), action.x, action.y) and hash("touch") and action.pressed then
		toggle(self)
	end
	return self.toggle
end

function on_message(self, message_id, message)
	
end

