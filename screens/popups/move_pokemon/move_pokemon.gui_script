local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"
local inventory = require "screens.storage.inventory"
local gro = require "utils.gui_render_order"
local url = require "utils.url"
local gui_colors = require "utils.gui_colors"

local inventory_buttons = {}

local function join_table(title, T, sep)
	if T then
		return title .. table.concat(T, sep)
	end
	return title
end

local function update_storage()
	msg.post(url.STORAGE, "inventory_updated")
	msg.post(url.STORAGE, "storage_updated")
end


local function set_pokemon_sprite(sprite, pokemon)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon)
	gui.set_texture(sprite, "sprite0")
	gui.play_flipbook(sprite, pokemon_sprite)
end


local function inventory_button(node, id, swap)
	return button.register(node, function()
		if not id or not swap then
			return
		end
		storage.move_to_storage(id)
		storage.move_to_inventory(swap)
		update_storage()
		monarch.back()
	end)
end


local function setup_inventory(self)
	local inventory = storage.list_of_ids_in_inventory()

	for i=1, 6 do
		local pokemon = storage.get_copy(inventory[i])
		local sprite = gui.get_node("swap_pokemon_" .. i .. "/pokemon_sprite")
		if pokemon then
			gui.set_enabled(sprite, true)
			set_pokemon_sprite(sprite, pokemon)
			table.insert(inventory_buttons, inventory_button(sprite, inventory[i], self.pokemon_id))
		else
			gui.set_enabled(sprite, false)
		end
	end
end

local function setup_move(pokemon, name, index)
	local move_name = gui.get_node("move_" .. index .. "/name")
	local move_icon = gui.get_node("move_" .. index .. "/element")
	local pp_lbl = gui.get_node("move_" .. index .. "/lbl_pp")
	local pp_current = gui.get_node("move_" .. index .. "/txt_pp_current")
	local pp_max = gui.get_node("move_" .. index .. "/txt_pp_max")
	
	local current = _pokemon.get_move_pp(pokemon, name) 
	local max = pokedex.get_move_pp(name)
	gui.set_text(pp_current, current)
	gui.set_text(pp_max, "/" .. max)
	local p = gui.get_position(pp_current)
	p.x = p.x + gui.get_text_metrics_from_node(pp_current).width
	gui.set_position(pp_max, p)
	if current == 0 then
		gui.set_color(pp_current, gui_colors.RED)
		gui.set_color(pp_max, gui_colors.RED)
		gui.set_color(pp_lbl, gui_colors.RED)
	elseif current < max then
		gui.set_color(pp_current, gui_colors.RED)
		gui.set_color(pp_max, gui_colors.GREEN)
		gui.set_color(pp_lbl, gui_colors.GREEN)
	else
		gui.set_color(pp_current, gui_colors.GREEN)
		gui.set_color(pp_max, gui_colors.GREEN)
		gui.set_color(pp_lbl, gui_colors.GREEN)
	end
	gui.set_text(move_name, name)
	gui.set_color(move_name, pokedex.get_move_color(name))
	gui.play_flipbook(move_icon, pokedex.get_move_icon(name))
end

local function setup_info(self)
	local pokemon = storage.get_copy(self.pokemon_id)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon)
	gui.set_texture(gui.get_node("pokemon_sprite"), texture)
	gui.play_flipbook(gui.get_node("pokemon_sprite"), pokemon_sprite)
	
	gui.set_text(gui.get_node("txt_index"), string.format("#%03d", _pokemon.get_index_number(pokemon)))
	gui.set_text(gui.get_node("txt_lvl"), "Lv. " .. _pokemon.get_current_level(pokemon))
	gui.set_text(gui.get_node("txt_ac"), "AC: " .. _pokemon.get_AC(pokemon))
	gui.set_text(gui.get_node("txt_hp"), "HP: " .. _pokemon.get_current_hp(pokemon) .. "/" .. _pokemon.get_max_hp(pokemon))
	gui.set_text(gui.get_node("txt_species"), _pokemon.get_current_species(pokemon))
	
	local vul = gui.get_node("vulnerabilities")
	local imm = gui.get_node("immunities")
	local res = gui.get_node("resistances")
	gui.set_text(vul, join_table("Vulnerabilities: ", _pokemon.get_vulnerabilities(pokemon), ", "))
	gui.set_text(res, join_table("Resistances: ", _pokemon.get_resistances(pokemon), ", "))
	gui.set_text(imm, join_table("Immunities: ", _pokemon.get_immunities(pokemon), ", "))

	local index = 0
	local moves_string = ""
	local pp_string = ""
	for move, data in pairs(_pokemon.get_moves(pokemon)) do
		index = index + 1
		setup_move(pokemon, move, index)
	end
	local speed, stype = _pokemon.get_speed_of_type(pokemon)
	gui.set_text(gui.get_node("txt_speed"), stype .. ": " .. speed)
end


function init(self)
	button.acquire()
	gui.set_render_order(gro.POPUP)
	local d = monarch.data("move_pokemon")
	local to = d.to
	self.pokemon_id = d.id

	setup_info(self)

	local swap = gui.get_node("swap")
	local move = gui.get_node("move")
	gui.set_enabled(swap, false)
	gui.set_enabled(move, true)

	button.register("btn_move", function()
		if to == "inventory" then
			if storage.free_space_in_inventory() then
				storage.move_to_inventory(self.pokemon_id)
				update_storage()
				monarch.back()
			else
				setup_inventory(self)
				gui.set_enabled(swap, true)
				gui.set_enabled(move, false)
			end
		elseif to == "storage" then
			storage.move_to_storage(self.pokemon_id)
			update_storage()
			monarch.back()
		end
	end)

	button.register("btn_close", function()
		monarch.back()
	end)

	button.register("btn_cancel", function()
		gui.set_enabled(swap, false)
		gui.set_enabled(move, true)
	end)

	button.register("btn_release", function()
		storage.release_pokemon(self.pokemon_id)
		update_storage()
		monarch.back()
	end)
end


function final(self)
	button.unregister()
end


function on_input(self, action_id, action)
	button.on_input(action_id, action)
	return true
end
