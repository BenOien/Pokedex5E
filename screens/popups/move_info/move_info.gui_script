local button = require "utils.button"
local monarch = require "monarch.monarch"
local gro = require "utils.gui_render_order"
local _pokemon = require "pokedex.pokemon"
local type_data = require "utils.type_data"
function init(self)
	gui.set_render_order(gro.POPUP)
	button.acquire()
	local data = monarch.data("move_info")
	local move_data = _pokemon.get_move_data(data.pokemon, data.name)
	gui.set_text(gui.get_node("txt_name"), data.name)
	
	gui.set_text(gui.get_node("txt_desc"), move_data.description)

	gui.set_text(gui.get_node("txt_time"), move_data.time)
	gui.set_text(gui.get_node("txt_duration"), move_data.duration)
	gui.set_text(gui.get_node("txt_range"), move_data.range)
	gui.set_text(gui.get_node("txt_type"), move_data.type)
	gui.play_flipbook(gui.get_node("icon_type"), type_data[move_data.type].icon)
	
	gui.set_text(gui.get_node("txt_pp"), data.data.pp .. "/" .. move_data.PP)
	local dmg = "-"
	if move_data.damage then
		local dmg = move_data.damage
	end
	
	gui.set_text(gui.get_node("txt_dmg"), dmg)

	button.register("btn_reset", function()
		_pokemon.reset_move_pp(data.pokemon, data.name)
		gui.set_text(gui.get_node("txt_pp"), move_data.PP .. "/" .. move_data.PP)
	end)
	
	button.register("btn_close", function()
		monarch.back()
	end)
end

function final(self)
	button.unregister()
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
end
