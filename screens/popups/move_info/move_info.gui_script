local monarch = require "monarch.monarch"
local gro = require "utils.gui_render_order"
local _pokemon = require "pokedex.pokemon"
local type_data = require "utils.type_data"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"

local function join_table(title, T, sep)
	if T then
		return title .. table.concat(T, sep)
	end
	return "-"
end

local data
local move_data

function init(self)
	gui.set_render_order(gro.POPUP)
	data = monarch.data("move_info")
	move_data = _pokemon.get_move_data(data.pokemon, data.name)
	gui.set_text(gui.get_node("txt_name"), data.name)
	gui.set_text(gui.get_node("txt_desc"), move_data.description)
	gui.set_text(gui.get_node("txt_time"), move_data.time)
	gui.set_text(gui.get_node("txt_duration"), move_data.duration)
	gui.set_text(gui.get_node("txt_range"), move_data.range)
	gui.set_text(gui.get_node("txt_move_power"), join_table("", move_data.power, "/"))

	-- Set type name and image and placements
	local type_node = gui.get_node("txt_type")
	gui.set_text(type_node, move_data.type)
	local p = gui.get_position(type_node)
	p.x = p.x + gui.get_text_metrics_from_node(type_node).width * 0.5
	gui.set_position(gui.get_node("icon_type"), p)
	gui.play_flipbook(gui.get_node("icon_type"), type_data[move_data.type].icon)

	gui.set_text(gui.get_node("txt_pp"), data.data.pp .. "/" .. move_data.PP)
	local dmg = "-"
	if move_data.damage then
		dmg = move_data.damage
	end
	
	gui.set_text(gui.get_node("txt_dmg"), dmg)

	local color = {"lbl_pp", "lbl_dmg", "lbl_time", "lbl_range", "lbl_duration", "background", "lbl_move_power"}
	for _, node_name in pairs(color)do
		local color_name = type_data[move_data.type].color
		local node = gui.get_node(node_name)
		gui.set_color(node, color_name)
	end
end

local function close()
	monarch.back()
end

local function reset()
	_pokemon.reset_move_pp(data.pokemon, data.name)
	gui.set_text(gui.get_node("txt_pp"), move_data.PP .. "/" .. move_data.PP)
end

function on_input(self, action_id, action)
	gooey.button("btn_close", action_id, action, close, gooey_buttons.close_button)
	local a = gooey.button("btn_reset", action_id, action, reset, gooey_buttons.common_button)
	local g = gooey.button("background", action_id, action, function() end)
	if not g.over and not a.over then
		gooey.button("dimmer", action_id, action, function() monarch.back() end)
	end
end
