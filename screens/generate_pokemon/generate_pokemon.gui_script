local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local pokedex = require "pokedex.pokedex"
local filters = require "pokedex.filters"

local gui_colors = require "utils.gui_colors"
local url = require "utils.url"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"

local storage_data = {}
local action_position = vmath.vector3()


local img_map = {["Water's-edge"] = "Waters-edge",
Forest = "Forest",
Cave = "Cave",
Sea = "Sea",
Urban = "Urban",
["Rough-terrain"] = "Rough",
Mountain = "Mountain",
Grassland = "Grassland",
Rare = "Rare",
All = "All"
}

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

local function table_of_rows(self)
	local l = {}
	for i=1, math.ceil(#self.filtered_pokemons / 3) do
		table.insert(l, i)
	end
	return l
end

local function update_storage_data(self)
	self.pokemon_rows = table_of_rows(self)

	storage_data = {}
	local pokemons = self.filtered_pokemons
	for i=1, math.ceil(#pokemons / 3) do
		storage_data[i] = {}
		for a=1, 3 do
			local species = pokemons[(i-1)*3 + a]
			if species then
				local sprite, texture = pokedex.get_sprite(species)
				local level = pokedex.get_minimum_wild_level(species)
				storage_data[i][a] = {sprite=sprite, texture=texture, species=species, level=level}
			end
		end
	end
end

local function update_items(item)
	for i=1, 3 do
		local sprite_node = item.nodes["pokemon/pokemon" .. i .. "/pokemon_sprite"]
		local text_node = item.nodes["pokemon/pokemon" .. i .. "/txt_pokemon"]
		local background = item.nodes["pokemon/pokemon" .. i .. "/background"]
		local data = storage_data[item.data]
		if data and data[i] then
			gui.set_enabled(background, true)
			gui.set_texture(sprite_node, data[i].texture)
			gui.play_flipbook(sprite_node, data[i].sprite)
			gui.set_text(text_node, data[i].species .. "\nLv. " .. data[i].level)
		else
			gui.set_enabled(background, false)
		end
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_items(item)
	end
end

local function on_item_selected(self, list)
	for i, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			for i=1, 3 do
				local sprite_node = entry.nodes[hash("pokemon/pokemon" .. i .. "/pokemon_sprite")]
				if gui.pick_node(sprite_node, action_position.x, action_position.y) then
					local pokemon_id = self.filtered_pokemons[(list.selected_item-1)*3 + i]
					if pokemon_id then
						--monarch.show("transfer_pokemon", {}, {id=pokemon_id, to="inventory"})
					end
				end
			end
		end
	end
end

local function set_trainer(self)
	local list = filters.trainer_class_list()
	self.trainer_class_index = (self.trainer_class_index % #list) + 1
	self.trainer_class = list[self.trainer_class_index]
	self.filtered_pokemons = filters.get_list(self.trainer_class, self.habitat)
	gui.set_text(gui.get_node("txt_trainer"), self.trainer_class)
	update_storage_data(self)
	update_list(gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows))
end

local function set_habitat(self)
	local list = filters.habitat_list()
	self.habitat_index = (self.habitat_index % #list) + 1
	self.habitat = list[self.habitat_index]
	self.filtered_pokemons = filters.get_list(self.trainer_class, self.habitat)
	gui.set_text(gui.get_node("txt_habitat"), self.habitat)
	gui.play_flipbook(gui.get_node("habitat"), img_map[self.habitat])
	update_storage_data(self)
	update_list(gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows))
end


function init(self)
	gooey.acquire_input()
	self.habitat_index = 1
	self.trainer_class_index = 1
	self.trainer_class = filters.trainer_class_list()[1]
	self.habitat = "All"

	self.filtered_pokemons = filters.get_list(self.trainer_class, self.habitat)
	gui.set_text(gui.get_node("txt_trainer"), self.trainer_class)
	gui.set_text(gui.get_node("txt_habitat"), self.habitat)
	update_storage_data(self)
	update_list(gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows))
end

function on_input(self, action_id, action)
	action_position.x = action.x
	action_position.y = action.y
	gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows, action_id, action, function(list) on_item_selected(self, list) end, update_list)
	gooey.button("trainer", action_id, action, function() set_trainer(self) end)
	gooey.button("habitat", action_id, action, function() set_habitat(self) end)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end

