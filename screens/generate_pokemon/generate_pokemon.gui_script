local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local pokedex = require "pokedex.pokedex"
local filters = require "pokedex.filters"
local generate = require "screens.generate_pokemon.generate_pokemon"
local gui_colors = require "utils.gui_colors"
local url = require "utils.url"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local dropdown = require "screens.generate_pokemon.dropdown"

local storage_data = {}
local action_position = vmath.vector3()

local selected_pokemon = {}

local img_map = {["Water's-edge"] = "Waters-edge", Forest = "Forest", Cave = "Cave", Sea = "Sea", 
				Urban = "Urban", ["Rough-terrain"] = "Rough", Mountain = "Mountain", Grassland = "Grassland",
				Rare = "Rare", All = "All"
}

local number_map = {["1/8"]=0.125, ["1/4"]=0.25, ["1/2"]=0.5, ["1"]=1, ["2"]=2, ["3"]=3, ["4"]=4, ["5"]=5, ["6"]=6, ["7"]=7,["8"]=8,
["9"]=9, ["10"]=10, ["11"]=11, ["12"]=12, ["13"]=13, ["14"]=14, ["15"]=15}
local sr = {"1/8", "1/4", "1/2", "1", "2", "3", "4", "5", "6", "7","8", "9", "10", "11", "12", "13", "14", "15"}


function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

local function table_of_rows(self)
	local l = {}
	for i=1, math.ceil(#self.filtered_pokemons / 3) do
		table.insert(l, i)
	end
	return l
end

local function update_storage_data(self)
	self.pokemon_rows = table_of_rows(self)

	storage_data = {}
	local pokemons = self.filtered_pokemons
	for i=1, math.ceil(#pokemons / 3) do
		storage_data[i] = {}
		for a=1, 3 do
			local species = pokemons[(i-1)*3 + a]
			if species then
				local sprite, texture = pokedex.get_sprite(species)
				local level = pokedex.get_minimum_wild_level(species)
				storage_data[i][a] = {sprite=sprite, texture=texture, species=species, level=level}
			end
		end
	end
end

local function update_items(item)
	for i=1, 3 do
		local sprite_node = item.nodes["pokemon/pokemon" .. i .. "/pokemon_sprite"]
		local text_node = item.nodes["pokemon/pokemon" .. i .. "/txt_pokemon"]
		local background = item.nodes["pokemon/pokemon" .. i .. "/background"]
		local data = storage_data[item.data]
		if data and data[i] and selected_pokemon[data[i].species] then
			gui.set_color(background, vmath.vector4(0.4,0.4,0.4,1))
		else
			gui.set_color(background, vmath.vector4(0.99,0.95,0.86,1))
		end
		
		if data and data[i] then
			gui.set_enabled(background, true)
			gui.set_texture(sprite_node, data[i].texture)
			gui.play_flipbook(sprite_node, data[i].sprite)
			gui.set_text(text_node, data[i].species .. "\nLv. " .. data[i].level)
		else
			gui.set_enabled(background, false)
		end
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_items(item)
	end
end

local function on_item_selected(self, list)
	for i, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			for i=1, 3 do
				local sprite_node = entry.nodes[hash("pokemon/pokemon" .. i .. "/pokemon_sprite")]
				if gui.pick_node(sprite_node, action_position.x, action_position.y) then
					local pokemon_id = self.filtered_pokemons[(list.selected_item-1)*3 + i]
					if pokemon_id then
						if selected_pokemon[pokemon_id] == nil or not selected_pokemon[pokemon_id] then
							selected_pokemon[pokemon_id] = true
						else
							selected_pokemon[pokemon_id] = false
						end
						gui.set_color(entry.nodes["pokemon/pokemon" .. i .. "/background"], vmath.vector4(0.4,0.4,0.4,1))
					end
				end
			end
		end
	end
end

local function get_filtered(self)
	return filters.get_list(self.trainer_class, self.habitat, self.min_sr, self.max_sr, self.level)
end

local function update_pokemons_list_view(self)
	self.filtered_pokemons = get_filtered(self)
	update_storage_data(self)
	update_list(gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows))
end

function init(self)
	gooey.acquire_input()
	self.habitat_index = 1
	self.trainer_class_index = 1
	self.trainer_class_list = filters.trainer_class_list()
	self.habitat_list = filters.habitat_list()
	self.trainer_class = "No Trainer"
	self.habitat = "All"
	self.min_sr = 0.25
	self.max_sr = 15
	self.level = 0
	
	self.filtered_pokemons = get_filtered(self)
	gui.set_text(gui.get_node("txt_trainer"), self.trainer_class)
	gui.set_text(gui.get_node("txt_habitat"), self.habitat)
	update_storage_data(self)
	update_list(gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows))
end

function on_input(self, action_id, action)
	action_position.x = action.x
	action_position.y = action.y
	
	local a = dropdown.on_input("Habitatadsasd", "habitat", "txt_habitat", "scroll_selection", "scroll_text", self.habitat_list, action_id, action, function()
		self.habitat = gui.get_text(gui.get_node("txt_habitat"))
		update_pokemons_list_view(self)
	end)
	if a then return true end
	local b = dropdown.on_input("Trainers", "trainer", "txt_trainer", "scroll_selection", "scroll_text", self.trainer_class_list, action_id, action, function()
		self.trainer_class = gui.get_text(gui.get_node("txt_trainer"))
		update_pokemons_list_view(self)
	end)
	if b then return true end
	local c = dropdown.on_input("sr_min", "min_sr", "txt_min_sr", "scroll_selection", "scroll_text", sr, action_id, action, function()
		local t = gui.get_text(gui.get_node("txt_min_sr"))
		self.min_sr = number_map[t]
		update_pokemons_list_view(self)
	end)
	if c then return true end
	local d = dropdown.on_input("sr_max", "max_sr", "txt_max_sr", "scroll_selection", "scroll_text", sr, action_id, action, function()
		local t = gui.get_text(gui.get_node("txt_max_sr"))
		self.max_sr = number_map[t]
		update_pokemons_list_view(self)
	end)
	if d then return true end
	gooey.dynamic_list("storage", "scroll_list", "pokemon/row", self.pokemon_rows, action_id, action, function(list) on_item_selected(self, list) end, update_list)

	gooey.button("level/btn_plus", action_id, action, function()
		self.level = math.min(self.level + 1, 20)
		gui.set_text(gui.get_node("txt_level"), self.level)
		update_pokemons_list_view(self)
	end, gooey_buttons.plus_button)

	gooey.button("level/btn_minus", action_id, action, function()
		self.level = math.max(self.level - 1, 0)
		gui.set_text(gui.get_node("txt_level"), self.level)
		update_pokemons_list_view(self)
	end, gooey_buttons.minus_button)
	
	gooey.button("btn_add", action_id, action, function()
		for p, _ in pairs(selected_pokemon) do
			generate.add_pokemon(p)
		end
		selected_pokemon = {}
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end

