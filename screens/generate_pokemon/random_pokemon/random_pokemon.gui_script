local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local generate = require "screens.generate_pokemon.generate_pokemon"
local pokedex = require "pokedex.pokedex"
local gooey_buttons = require "utils.gooey_buttons"

local function update_pokemon(self)
	local sprite, texture = pokedex.get_sprite(self.species)
	gui.set_texture(gui.get_node("pokemon_sprite"), texture)
	gui.play_flipbook(gui.get_node("pokemon_sprite"), sprite)
	local level = self.level == 0 and pokedex.get_minimum_wild_level(self.species) or self.level
	gui.set_text(gui.get_node("txt_pokemon"), self.species:upper() .. "\nLv. " .. level)
end

function init(self)
	gooey.acquire_input()
	local data = monarch.data("random_pokemon")
	self.pokemons = data.pokemons
	self.species = data.species
	self.level = data.level
	
	update_pokemon(self)
end

function on_input(self, action_id, action)
	gooey.button("btn_random", action_id, action, function()
		local index = rnd.range(1, #self.pokemons)
		self.species = self.pokemons[index]
		update_pokemon(self)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_random")) end)

	gooey.button("btn_add", action_id, action, function()
		local level = self.level == 0 and pokedex.get_minimum_wild_level(self.species) or self.level
		generate.add_pokemon(self.species, level)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end)

	gooey.button("btn_back", action_id, action, function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Back",
			value = monarch.top()
		}
		monarch.back()
	end)
	return true
end
