local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"
local gooey = require "gooey.gooey"

local selected_item
local HAVE_EVOLVED = false

local STATS = {"STR", "DEX", "CON", "INT", "WIS", "CHA"}

local function redraw(self)
	gui.set_text(gui.get_node("spicies"), self.pokemon.species)
	
	for _, stat in pairs(STATS) do
		local n = gui.get_node(stat)
		gui.set_text(n, stat .. " " .. self.pokemon.attributes.current[stat] + self.pokemon[stat])
		if self.pokemon[stat] < 0 then
			gui.set_color(n, vmath.vector3(1, 0, 0, 1))
		elseif self.pokemon[stat] == 0 then
			gui.set_color(n, vmath.vector3(0, 0, 0, 1))
		else
			gui.set_color(n, vmath.vector3(0, 1, 0, 1))
		end
	end

	local level_node = gui.get_node("txt_level")
	gui.set_text(level_node, "Lv. " .. self.pokemon.level)
	
	local max_improve_node = gui.get_node("asi_title")

	local available_at_current_level = _pokemon.level_data(self.pokemon.old_level).ASI
	local available_at_new_level = _pokemon.level_data(self.pokemon.level).ASI
	local available = (available_at_new_level - available_at_current_level) * 2
	gui.set_text(max_improve_node, "Available Points: " .. available - self.ability_score_improvment)
	
	local move_1_node = gui.get_node("move_1")
	local move_2_node = gui.get_node("move_2")
	local move_3_node = gui.get_node("move_3")
	local move_4_node = gui.get_node("move_4")

	gui.set_text(move_1_node, self.pokemon.moves[1])
	gui.set_text(move_2_node, self.pokemon.moves[2])
	gui.set_text(move_3_node, self.pokemon.moves[3])
	gui.set_text(move_4_node, self.pokemon.moves[4])

	-- Check Evolve
	if not HAVE_EVOLVED and pokedex.can_evolve(self.pokemon.species) and pokedex.evolve_level(self.pokemon.species) <= self.pokemon.level and self.pokemon.old_level < self.pokemon.level then
		gui.set_enabled(self.evolve_button, true)
	else
		gui.set_enabled(self.evolve_button, false)
	end
end

local function pick_move(self)
	if pokedex.is_pokemon(self.pokemon.species) then
		gui.set_enabled(self.root, false)
		local available_moves = pokedex.get_pokemons_moves(self.pokemon.species, self.pokemon.level)
		for _, move in pairs(self.pokemon.moves) do
			for i, selected_move in pairs(available_moves) do
				if move == selected_move then
					table.remove(available_moves, i)
				end
			end
		end

		monarch.show("scrollist", {}, {items=available_moves, message_id="move", sender=msg.url()})
	end
end

local function increase(self, stat)
	if self.pokemon.attributes.current[stat] + self.pokemon[stat] < self.pokemon.attributes.max[stat] then
		self.pokemon[stat] = self.pokemon[stat] + 1
		self.ability_score_improvment = self.ability_score_improvment + 1
		redraw(self)
	end
end

local function decrease(self, stat)
	self.pokemon[stat] = self.pokemon[stat] - 1
	self.ability_score_improvment = self.ability_score_improvment - 1
	redraw(self)
end

function init(self)
	button.acquire()
	self.pokemon = {moves={}, STR=0, DEX=0, CON=0, INT=0, WIS=0, CHA=0}
	self.list_items = {}

	self.root = gui.get_node("root")
	self.evolve_button = gui.get_node("btn_evolve")
	gui.set_enabled(self.evolve_button, false)
	self.state = 0
	self.ability_score_improvment = 0
	
	local pokemon_id = monarch.data("edit").id
	local pokemon = storage.get(pokemon_id)
	self.old_species = pokemon.species
	self.pokemon.id = pokemon_id
	self.pokemon.species = pokemon.species
	self.pokemon.level = pokemon.level
	self.pokemon.old_level = pokemon.level
	self.pokemon.attributes = {}
	self.pokemon.attributes.max = {}
	self.pokemon.attributes.current = pokemon.attributes
	for _, stat in pairs(STATS) do
		self.pokemon.attributes.max[stat] = 20
		if pokemon.nature_attributes[stat] > 0 then
			self.pokemon.attributes.max[stat] = self.pokemon.attributes.max[stat] + pokemon.nature_attributes[stat]
		end
	end
	
	local index = 0
	for name, _ in pairs(pokemon.moves) do
		index = index + 1
		table.insert(self.pokemon.moves, name)
	end
	for i=index+1, 4 do
		table.insert(self.pokemon.moves, "Move")
	end

	gui.set_text(gui.get_node("txt_current_level"), "Lv. " .. pokemon.level .. "  ->")

	button.register("btn_level_increase", function()
		if self.pokemon.level < 20 then
			self.pokemon.level = self.pokemon.level + 1
			redraw(self)
		end
	end)
	
	button.register("btn_level_reduce", function()
		if self.pokemon.level > 1 and self.pokemon.level > self.pokemon.old_level then
			if not HAVE_EVOLVED or (HAVE_EVOLVED and pokedex.evolve_level(self.old_species) < self.pokemon.level) then
				self.pokemon.level = self.pokemon.level - 1
				redraw(self)
			end
		end
	end)

	button.register("btn_edit", function()
		_pokemon.edit(pokemon, self.pokemon)
		monarch.show("party")
	end)
	
	button.register("btn_str_reduce", function()
		decrease(self, "STR")
	end)
	button.register("btn_str_increase", function()
		increase(self, "STR")
	end)
	button.register("btn_dex_reduce", function()
		decrease(self, "DEX")
	end)
	button.register("btn_dex_increase", function()
		increase(self, "DEX")
	end)
	button.register("btn_con_reduce", function()
		decrease(self, "CON")
	end)
	button.register("btn_con_increase", function()
		increase(self, "CON")
	end)
	button.register("btn_int_reduce", function()
		decrease(self, "INT")
	end)
	button.register("btn_int_increase", function()
		increase(self, "INT")
	end)
	button.register("btn_wis_reduce", function()
		decrease(self, "WIS")
	end)
	button.register("btn_wis_increase", function()
		increase(self, "WIS")
	end)
	button.register("btn_cha_reduce", function()
		decrease(self, "CHA")
	end)
	button.register("btn_cha_increase", function()
		increase(self, "CHA")
	end)

	button.register("btn_move_1", function()
		self.move_button_index = 1
		pick_move(self)
	end)

	button.register("btn_move_2", function()
		self.move_button_index = 2
		pick_move(self)
	end)

	button.register("btn_move_3", function()
		self.move_button_index = 3
		pick_move(self)
	end)

	button.register("btn_move_4", function()
		self.move_button_index = 4
		pick_move(self)
	end)

	button.register(self.evolve_button, function()
		self.state = 2
		self.pokemon.moves = {}
		local index = 0
		for name, _ in pairs(pokemon.moves) do
			index = index + 1
			table.insert(self.pokemon.moves, name)
		end
		for i=index+1, 4 do
			table.insert(self.pokemon.moves, "Move")
		end

		local evolve_into = pokedex.evolve_into(self.pokemon.species)
		if #evolve_into == 1 then
			HAVE_EVOLVED = true
			self.old_species = self.pokemon.species
			self.ability_score_improvment = self.ability_score_improvment - pokedex.evolve_points(self.pokemon.species)
			self.pokemon.species = evolve_into[1]
		else
			gui.set_enabled(self.root, false)
			gui.set_position(self.scrollist, vmath.vector3())
			self.list_items = evolve_into
		end
		
		gui.set_enabled(self.evolve_button, false)
		redraw(self)
	end)
	
	redraw(self)
end

function final(self)
	button.unregister()
end

function on_message(self, message_id, message, sender)
	local n = gui.get_node("move_" .. self.move_button_index)
	if message.item then
		self.pokemon.moves[self.move_button_index] = message.item
		gui.set_text(n, message.item)
	end
	gui.set_enabled(self.root, true)
	redraw(self)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
end
