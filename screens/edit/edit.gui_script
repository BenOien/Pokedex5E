local pokemon_edit = require "templates.change_pokemon.change_pokemon"
local monarch = require "monarch.monarch"
local button = require "utils.button"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local url = require "utils.url"
local gui_colors = require "utils.gui_colors"

local function pokemon_image(pokemon_data)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon_data)
	gui.set_texture(gui.get_node("change_pokemon/pokemon_sprite"), texture)
	gui.play_flipbook(gui.get_node("change_pokemon/pokemon_sprite"), pokemon_sprite)
end

function init(self)
	self.have_evolved = false
	button.acquire()
	local pokemon_id = monarch.data("edit").id
	local pokemon = storage.get_copy(pokemon_id)
	pokemon_edit.init(self, pokemon)
	self.level = _pokemon.get_current_level(pokemon)

	gui.set_text(gui.get_node("change_pokemon/txt_level"), "Lv. " .. _pokemon.get_current_level(pokemon))
	gui.set_color(gui.get_node("change_pokemon/txt_level_mod"), gui_colors.GREEN)
	self.evolve_button = gui.get_node("btn_evolve")
	pokemon_image(pokemon)
	gui.set_text(gui.get_node("change_pokemon/nature"),  _pokemon.get_nature(pokemon))
	function self.redraw(self)
		if not self.have_evolved and pokedex.get_evolution_possible(_pokemon.get_current_species(pokemon)) and 
		pokedex.get_evolution_level(_pokemon.get_current_species(pokemon)) <= self.level then
			gui.set_enabled(self.evolve_button, true)
		else
			gui.set_enabled(self.evolve_button, false)
		end
		gui.set_text(gui.get_node("change_pokemon/txt_level"), "Lv. " .. _pokemon.get_current_level(pokemon))
		if self.level - _pokemon.get_current_level(pokemon)> 0 then
			gui.set_text(gui.get_node("change_pokemon/txt_level_mod"), "+" .. self.level - _pokemon.get_current_level(pokemon))
		else
			gui.set_text(gui.get_node("change_pokemon/txt_level_mod"), "" )
		end
	end

	button.register(self.evolve_button, function()
		self.pokemon.moves = _pokemon.get_moves(pokemon)
		
		local evolve_into = pokedex.get_evolutions(_pokemon.get_current_species(pokemon))
		if #evolve_into == 1 then
			msg.post("#", "evolve", {item=evolve_into[1]})
		else
			gui.set_enabled(self.root, false)
			monarch.show("scrollist", {}, {items=evolve_into, message_id="evolve", sender=msg.url()})
		end

		gui.set_enabled(self.evolve_button, false)
		pokemon_edit.redraw(self)
	end)

	button.register("btn_edit", function()
		_pokemon.update_increased_attributes(self.pokemon, self.increased_attributes)
		local max_hp = _pokemon.get_max_hp_at_level(self.pokemon, self.level)
		if self.have_evolved then
			max_hp = max_hp + self.level * 2
			_pokemon.set_evolved(pokemon)
		end
		_pokemon.set_max_hp(self.pokemon, max_hp)
		self.pokemon.level.current = self.level
		_pokemon.save(self.pokemon)
		monarch.show("party", {clear=true})
	end)
	button.register("change_pokemon/btn_close", function()
		monarch.back()
	end)
	pokemon_edit.register_buttons_after_nature(self)
	pokemon_edit.register_buttons_after_species(self)
	pokemon_edit.redraw(self)
end

function final(self)
	pokemon_edit.final(self)
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
end
