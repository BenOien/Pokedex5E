local monarch = require "monarch.monarch"
local _pokemon = require "pokedex.pokemon"
local storage = require "pokedex.storage"
local pokedex = require "pokedex.pokedex"
local nature = require "pokedex.natures"
local defsave = require "defsave.defsave"
local movedex = require "pokedex.moves"
function init(self)
	math.randomseed(os.clock())
	self.defsave = defsave.save
end

local function add_random_pokemon()
	local random_pokemon = pokedex.list[math.random(#pokedex.list)]
	local starting_moves = pokedex.get_starting_moves(random_pokemon)
	local pokemon = _pokemon.new({species=random_pokemon})
	local moves = {}
	for i=1, 4 do
		if starting_moves[i] then
			local pp = movedex.get_move_pp(starting_moves[i])
			moves[starting_moves[i]] = {pp=pp, index=i}
		end
	end
	local level = math.random(20)
	pokemon.level.caught = level
	pokemon.level.current = level
	pokemon.moves = moves
	pokemon.nature = nature.list[math.random(#nature.list)]
	storage.add(pokemon)
end

function on_input(self, action_id, action)
	if sys.get_engine_info().is_debug then
		if action_id == hash("overdraw") and action.released then
			msg.post("@render:", "toggle_overdraw")
		elseif action_id == hash("stack") and action.released then
			defsave.save = function() end
			for i=1, 100 do
				add_random_pokemon()
			end
			defsave.save = self.defsave
		end
	end
end
