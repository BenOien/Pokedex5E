local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local storage = require "pokedex.storage"

local url = require "utils.url"
local transitions = require "utils.transitions"

local function delete(profile)
	profiles.delete(profile)
end

local function activate(profile, slot)
	if profile then
		profiles.set_active(slot)
		storage.load(profiles.get_active())
		monarch.show("party", {clear=true})
	else
		monarch.show("pick_name", nil, {sender=msg.url(), slot=slot})
	end
end

function init(self)
	button.acquire()
	msg.post(url.SWITCHER, "activate", {screen="profiles"})
	self.transition = transitions.default(gui.get_node("root"))
	
	
	local _profiles = profiles.get_all_profiles()
	for i=1, 3 do
		if _profiles[i] then
			gui.set_text(gui.get_node("trainer_name_" .. i), _profiles[i].name)
			gui.set_text(gui.get_node("trainer_stats_" .. i), " Own: " .. _profiles[i].caught - _profiles[i].released)
		end
		button.register("btn_slot_" .. i, function()
			activate(_profiles[i], i)
		end)
	end
	if profiles.get_active_slot() ~= nil then
		local size = vmath.vector3(850, 200, 0)
		gui.set_size(gui.get_node("btn_slot_" .. profiles.get_active_slot()), size)
	end
end

function final(self)
	button.unregister()
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if profiles.get_active_slot() == nil then
		return true
	end
end

function on_message(self, message_id, message, sender)
	transitions.on_message(self.transition, message_id, message, sender)
end