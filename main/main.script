local monarch = require "monarch.monarch"
local defsave = require "defsave.defsave"

local movedex = require "pokedex.moves"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local profiles = require "pokedex.profiles"
local filters = require "pokedex.filters"
local flow = require "utils.flow"
local metadata = require "utils.metadata"
local gui_colors = require "utils.gui_colors"
local notify = require "utils.notify"
require "utils.lfs_extend"

local function send_crash_on_start()
	crash.write_dump()
	local handle = crash.load_previous()
	if handle then
		gameanalytics.addErrorEvent {
			severity = "Error",
			message =  crash.get_extra_data(handle)
		}
		crash.release(handle)
	end
end

local function send_crash_analytics(source, message, traceback)
	gameanalytics.addErrorEvent {
		severity = "Critical",
		message = message .. "\n" .. traceback
	}
end


function init(self)
	send_crash_on_start()
	sys.set_error_handler(send_crash_analytics)
	defsave.appname = "pokedex5E"
	defsave.verbose = false
	defsave.use_default_data = false
	metadata.load()
	metadata.save()
	math.randomseed(os.clock())
	math.random()
	math.random()
	math.random()
	msg.post("@render:", "clear_color", {color=gui_colors.BACKGROUND})
	
	--input order
	msg.post(".", "acquire_input_focus")
	msg.post("/screens", "acquire_input_focus")
	msg.post("/popups", "acquire_input_focus")
	msg.post("/debug", "acquire_input_focus")
	msg.post("/menu", "acquire_input_focus")

	local system = sys.get_sys_info().system_name
	if system == "Windows" then
		defos.set_window_size(0, 0, 570, 1024)
	end
	msg.post("#", "show_splash")
	profiles.init()
	flow.start(function()
		flow.delay(1)

		if profiles.is_new_game() or not profiles.get_active_slot() then
			msg.post("#", "show_profile")
			flow.until_true(function() return profiles.get_active_slot() end)
		end
		movedex.init()
		natures.init()
		pokedex.init()
		storage.init()
		filters.init()
		
		if #storage.list_of_ids_in_inventory() > 0 then
			msg.post("#", "show_party")
		elseif #storage.list_of_ids_in_storage() > 0 then
			msg.post("#", "show_storage")
		else
			msg.post("#", "show_add")
		end
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_profile") then
		monarch.show("profiles")
	elseif message_id == hash("show_party") then
		monarch.show("party")
	elseif message_id == hash("show_splash") then
		monarch.show("splash")
	elseif message_id == hash("show_storage") then
		monarch.show("storage")
	elseif message_id == hash("show_add") then
		monarch.show("add")
	end
end

function update(self, dt)
	flow.update(dt)
end

function final(self)
	storage.save()
end