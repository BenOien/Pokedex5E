local monarch = require "monarch.monarch"
local defsave = require "defsave.defsave"

local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local profiles = require "pokedex.profiles"
local flow = require "utils.flow"
local metadata = require "utils.metadata"
require "utils.lfs_extend"

function mysplit(inputstr, sep)
	if sep == nil then
		sep = "%s"
	end
	local t={}
	for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
		table.insert(t, str)
	end
	return t
end

local function nuke_old()
	if metadata.get("app_version") then
		local version = mysplit(metadata.get("app_version"), ".")
		if tonumber(version[1]) == 0 and tonumber(version[2]) <= 2 then
			--lfs.rmdirs(sys.get_save_file("pokedex5E", ""):sub(1, -2))
		end
	else
		print("Nuking Save Data")
		lfs.rmdirs(sys.get_save_file("pokedex5E", ""):sub(1, -2))
	end
end

function init(self)
	defsave.appname = "pokedex5E"
	defsave.use_default_data = false
	metadata.load()
	nuke_old()
	metadata.save()
	
	msg.post("@render:", "clear_color", {color=vmath.vector4(0.46, 0.85, 1, 1)})
	--input order
	msg.post(".", "acquire_input_focus")
	msg.post("/screens", "acquire_input_focus")
	msg.post("/popups", "acquire_input_focus")
	msg.post("/debug", "acquire_input_focus")
	
	msg.post("#", "show_first_screen")

	local system = sys.get_sys_info().system_name
	if system == "Windows" then
		defos.set_window_size(0, 0, 570, 1024)
	end

	profiles.init()
	flow.start(function()
		flow.until_true(function()
			return not profiles.is_new_game() and profiles.get_active_slot()
		end)
		natures.init()
		pokedex.init()
		storage.init()
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_first_screen") then
		monarch.show(hash("splash"), {}, {clear=true}, function()
			if profiles.is_new_game() then
				timer.delay(0.8, false, function() 
					monarch.show(hash("pick_name"))
				end)
			else
				monarch.show(hash("switcher"), { no_stack = true })
			end
		end)
	end
end

function update(self, dt)
	flow.update(dt)
end

function final(self)
	storage.save()
end