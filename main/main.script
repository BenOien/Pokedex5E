local monarch = require "monarch.monarch"
local defsave = require "defsave.defsave"

local movedex = require "pokedex.moves"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local profiles = require "pokedex.profiles"
local filters = require "pokedex.filters"
local flow = require "utils.flow"
local metadata = require "utils.metadata"
local gui_colors = require "utils.gui_colors"

require "utils.lfs_extend"

local function mysplit(inputstr, sep)
	if sep == nil then
		sep = "%s"
	end
	local t={}
	for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
		table.insert(t, str)
	end
	return t
end

local function nuke_old()
	if metadata.get("app_version") then
		local version = mysplit(metadata.get("app_version"), ".")
		if tonumber(version[1]) == 0 and tonumber(version[2]) <= 2 then
			--lfs.rmdirs(sys.get_save_file("pokedex5E", ""):sub(1, -2))
		end
	else
		print("Nuking Save Data")
		lfs.rmdirs(sys.get_save_file("pokedex5E", ""):sub(1, -2))
	end
end

function init(self)
	defsave.appname = "pokedex5E"
	defsave.verbose = false
	defsave.use_default_data = false
	metadata.load()
	metadata.save()
	
	msg.post("@render:", "clear_color", {color=gui_colors.BACKGROUND})
	
	--input order
	msg.post(".", "acquire_input_focus")
	msg.post("/screens", "acquire_input_focus")
	msg.post("/popups", "acquire_input_focus")
	msg.post("/debug", "acquire_input_focus")
	msg.post("/menu", "acquire_input_focus")

	local system = sys.get_sys_info().system_name
	if system == "Windows" then
		defos.set_window_size(0, 0, 570, 1024)
	end
	msg.post("#", "show_splash")
	profiles.init()
	flow.start(function()
		flow.delay(1)

		if profiles.is_new_game() or not profiles.get_active_slot() then
			msg.post("#", "show_profile")
			flow.until_true(function() return profiles.get_active_slot() end)
		end
		movedex.init()
		natures.init()
		pokedex.init()
		storage.init()
		filters.init()
		
		if #storage.list_of_ids_in_inventory() > 0 then
			msg.post("#", "show_party")
		elseif #storage.list_of_ids_in_storage() > 0 then
			msg.post("#", "show_storage")
		else
			msg.post("#", "show_add")
		end
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_profile") then
		monarch.show("profiles")

	elseif message_id == hash("show_party") then
		monarch.show("party")
		
	elseif message_id == hash("show_splash") then
		monarch.show("splash")
		collectionfactory.create("/menu#collectionfactory")
		
	elseif message_id == hash("show_storage") then
		monarch.show("storage")
		
	elseif message_id == hash("show_add") then
		monarch.show("add")
	end
end

function update(self, dt)
	flow.update(dt)
end

function final(self)
	storage.save()
end